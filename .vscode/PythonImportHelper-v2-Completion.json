[
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "abort",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "MethodView",
        "importPath": "flask.views",
        "description": "flask.views",
        "isExtraImport": true,
        "detail": "flask.views",
        "documentation": {}
    },
    {
        "label": "MethodView",
        "importPath": "flask.views",
        "description": "flask.views",
        "isExtraImport": true,
        "detail": "flask.views",
        "documentation": {}
    },
    {
        "label": "MethodView",
        "importPath": "flask.views",
        "description": "flask.views",
        "isExtraImport": true,
        "detail": "flask.views",
        "documentation": {}
    },
    {
        "label": "MethodView",
        "importPath": "flask.views",
        "description": "flask.views",
        "isExtraImport": true,
        "detail": "flask.views",
        "documentation": {}
    },
    {
        "label": "MethodView",
        "importPath": "flask.views",
        "description": "flask.views",
        "isExtraImport": true,
        "detail": "flask.views",
        "documentation": {}
    },
    {
        "label": "MethodView",
        "importPath": "flask.views",
        "description": "flask.views",
        "isExtraImport": true,
        "detail": "flask.views",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask_smorest",
        "description": "flask_smorest",
        "isExtraImport": true,
        "detail": "flask_smorest",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask_smorest",
        "description": "flask_smorest",
        "isExtraImport": true,
        "detail": "flask_smorest",
        "documentation": {}
    },
    {
        "label": "Api",
        "importPath": "flask_smorest",
        "description": "flask_smorest",
        "isExtraImport": true,
        "detail": "flask_smorest",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask_smorest",
        "description": "flask_smorest",
        "isExtraImport": true,
        "detail": "flask_smorest",
        "documentation": {}
    },
    {
        "label": "abort",
        "importPath": "flask_smorest",
        "description": "flask_smorest",
        "isExtraImport": true,
        "detail": "flask_smorest",
        "documentation": {}
    },
    {
        "label": "Api",
        "importPath": "flask_smorest",
        "description": "flask_smorest",
        "isExtraImport": true,
        "detail": "flask_smorest",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask_smorest",
        "description": "flask_smorest",
        "isExtraImport": true,
        "detail": "flask_smorest",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask_smorest",
        "description": "flask_smorest",
        "isExtraImport": true,
        "detail": "flask_smorest",
        "documentation": {}
    },
    {
        "label": "Api",
        "importPath": "flask_smorest",
        "description": "flask_smorest",
        "isExtraImport": true,
        "detail": "flask_smorest",
        "documentation": {}
    },
    {
        "label": "Api",
        "importPath": "flask_smorest",
        "description": "flask_smorest",
        "isExtraImport": true,
        "detail": "flask_smorest",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask_smorest",
        "description": "flask_smorest",
        "isExtraImport": true,
        "detail": "flask_smorest",
        "documentation": {}
    },
    {
        "label": "abort",
        "importPath": "flask_smorest",
        "description": "flask_smorest",
        "isExtraImport": true,
        "detail": "flask_smorest",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "db",
        "description": "db",
        "isExtraImport": true,
        "detail": "db",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "db",
        "description": "db",
        "isExtraImport": true,
        "detail": "db",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "db",
        "description": "db",
        "isExtraImport": true,
        "detail": "db",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "db",
        "description": "db",
        "isExtraImport": true,
        "detail": "db",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "db",
        "description": "db",
        "isExtraImport": true,
        "detail": "db",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "db",
        "description": "db",
        "isExtraImport": true,
        "detail": "db",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "db",
        "description": "db",
        "isExtraImport": true,
        "detail": "db",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "db",
        "description": "db",
        "isExtraImport": true,
        "detail": "db",
        "documentation": {}
    },
    {
        "label": "Board",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Board",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Board",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Board",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "Todo",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "quote_plus",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "quote_plus",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "user_blp",
        "importPath": "routes.users",
        "description": "routes.users",
        "isExtraImport": true,
        "detail": "routes.users",
        "documentation": {}
    },
    {
        "label": "user_blp",
        "importPath": "routes.users",
        "description": "routes.users",
        "isExtraImport": true,
        "detail": "routes.users",
        "documentation": {}
    },
    {
        "label": "board_blp",
        "importPath": "routes.board",
        "description": "routes.board",
        "isExtraImport": true,
        "detail": "routes.board",
        "documentation": {}
    },
    {
        "label": "board_blp",
        "importPath": "routes.board",
        "description": "routes.board",
        "isExtraImport": true,
        "detail": "routes.board",
        "documentation": {}
    },
    {
        "label": "BookSchema",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "ItemSchema",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "book_blp",
        "importPath": "api",
        "description": "api",
        "isExtraImport": true,
        "detail": "api",
        "documentation": {}
    },
    {
        "label": "blp",
        "importPath": "api",
        "description": "api",
        "isExtraImport": true,
        "detail": "api",
        "documentation": {}
    },
    {
        "label": "Schema",
        "importPath": "marshmallow",
        "description": "marshmallow",
        "isExtraImport": true,
        "detail": "marshmallow",
        "documentation": {}
    },
    {
        "label": "fields",
        "importPath": "marshmallow",
        "description": "marshmallow",
        "isExtraImport": true,
        "detail": "marshmallow",
        "documentation": {}
    },
    {
        "label": "Schema",
        "importPath": "marshmallow",
        "description": "marshmallow",
        "isExtraImport": true,
        "detail": "marshmallow",
        "documentation": {}
    },
    {
        "label": "fields",
        "importPath": "marshmallow",
        "description": "marshmallow",
        "isExtraImport": true,
        "detail": "marshmallow",
        "documentation": {}
    },
    {
        "label": "Migrate",
        "importPath": "flask_migrate",
        "description": "flask_migrate",
        "isExtraImport": true,
        "detail": "flask_migrate",
        "documentation": {}
    },
    {
        "label": "Swagger",
        "importPath": "flasgger",
        "description": "flasgger",
        "isExtraImport": true,
        "detail": "flasgger",
        "documentation": {}
    },
    {
        "label": "Swagger",
        "importPath": "flasgger",
        "description": "flasgger",
        "isExtraImport": true,
        "detail": "flasgger",
        "documentation": {}
    },
    {
        "label": "escape",
        "importPath": "markupsafe",
        "description": "markupsafe",
        "isExtraImport": true,
        "detail": "markupsafe",
        "documentation": {}
    },
    {
        "label": "escape",
        "importPath": "markupsafe",
        "description": "markupsafe",
        "isExtraImport": true,
        "detail": "markupsafe",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "create_app",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "Sock",
        "importPath": "flask_sock",
        "description": "flask_sock",
        "isExtraImport": true,
        "detail": "flask_sock",
        "documentation": {}
    },
    {
        "label": "Sock",
        "importPath": "flask_sock",
        "description": "flask_sock",
        "isExtraImport": true,
        "detail": "flask_sock",
        "documentation": {}
    },
    {
        "label": "Sock",
        "importPath": "flask_sock",
        "description": "flask_sock",
        "isExtraImport": true,
        "detail": "flask_sock",
        "documentation": {}
    },
    {
        "label": "Sock",
        "importPath": "flask_sock",
        "description": "flask_sock",
        "isExtraImport": true,
        "detail": "flask_sock",
        "documentation": {}
    },
    {
        "label": "Sock",
        "importPath": "flask_sock",
        "description": "flask_sock",
        "isExtraImport": true,
        "detail": "flask_sock",
        "documentation": {}
    },
    {
        "label": "threading,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading.",
        "description": "threading.",
        "detail": "threading.",
        "documentation": {}
    },
    {
        "label": "requests,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests.",
        "description": "requests.",
        "detail": "requests.",
        "documentation": {}
    },
    {
        "label": "Api",
        "importPath": "flask_restful",
        "description": "flask_restful",
        "isExtraImport": true,
        "detail": "flask_restful",
        "documentation": {}
    },
    {
        "label": "Resource",
        "importPath": "flask_restful",
        "description": "flask_restful",
        "isExtraImport": true,
        "detail": "flask_restful",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "assignment_0923.app",
        "description": "assignment_0923.app",
        "peekOfCode": "def index():\n    users = [\n        {\"username\": \"admin\", \"realname\": \"admin\"},\n        {\"username\": \"honeybadger\", \"realname\": \"Samuel\"},\n        {\"username\": \"hospital\", \"realname\": \"Max\"},\n        {\"username\": \"murder ink\", \"realname\": \"Rodney\"}\n    ]\n    return render_template('index.html', users=users)\nif __name__ == \"__main__\":\n    app.run(debug=True, port=5023)",
        "detail": "assignment_0923.app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "assignment_0923.app",
        "description": "assignment_0923.app",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/\")\ndef index():\n    users = [\n        {\"username\": \"admin\", \"realname\": \"admin\"},\n        {\"username\": \"honeybadger\", \"realname\": \"Samuel\"},\n        {\"username\": \"hospital\", \"realname\": \"Max\"},\n        {\"username\": \"murder ink\", \"realname\": \"Rodney\"}\n    ]\n    return render_template('index.html', users=users)",
        "detail": "assignment_0923.app",
        "documentation": {}
    },
    {
        "label": "BoardList",
        "kind": 6,
        "importPath": "assignment_0924.routes.board",
        "description": "assignment_0924.routes.board",
        "peekOfCode": "class BoardList(MethodView):\n    def get(self):\n        boards = Board.query.all()\n        return jsonify([{\"user_id\": board.user_id, \n                        \"id\": board.id,\n                        \"title\": board.title, \"content\": board.content, \"author\": board.author.name} for board in boards])\n    def post(self):\n        data = request.json\n        new_board = Board(title=data['title'], content=data['content'], user_id=data['user_id'])\n        db.session.add(new_board)",
        "detail": "assignment_0924.routes.board",
        "documentation": {}
    },
    {
        "label": "BoardResource",
        "kind": 6,
        "importPath": "assignment_0924.routes.board",
        "description": "assignment_0924.routes.board",
        "peekOfCode": "class BoardResource(MethodView):\n    def get(self, board_id):\n        board = Board.query.get_or_404(board_id)\n        return jsonify({\"title\": board.title, \"content\": board.content, \"author\": board.author.name})\n    def put(self, board_id):\n        board = Board.query.get_or_404(board_id)\n        data = request.json\n        board.title = data['title']\n        board.content = data['content']\n        db.session.commit()",
        "detail": "assignment_0924.routes.board",
        "documentation": {}
    },
    {
        "label": "board_blp",
        "kind": 5,
        "importPath": "assignment_0924.routes.board",
        "description": "assignment_0924.routes.board",
        "peekOfCode": "board_blp = Blueprint('Boards', 'boards', description='Operations on boards', url_prefix='/board')\n@board_blp.route('/')\nclass BoardList(MethodView):\n    def get(self):\n        boards = Board.query.all()\n        return jsonify([{\"user_id\": board.user_id, \n                        \"id\": board.id,\n                        \"title\": board.title, \"content\": board.content, \"author\": board.author.name} for board in boards])\n    def post(self):\n        data = request.json",
        "detail": "assignment_0924.routes.board",
        "documentation": {}
    },
    {
        "label": "UserList",
        "kind": 6,
        "importPath": "assignment_0924.routes.users",
        "description": "assignment_0924.routes.users",
        "peekOfCode": "class UserList(MethodView):\n    def get(self):\n        users = User.query.all()\n        user_data = [{\"id\":user.id, \"name\": user.name, \"email\": user.email} for user in users]  # Convert to list\n        return jsonify(user_data)\n    def post(self):\n        print(\"요청은 오는가?\")\n        user_data = request.json\n        new_user = User(name=user_data['name'], email=user_data['email'])\n        db.session.add(new_user)",
        "detail": "assignment_0924.routes.users",
        "documentation": {}
    },
    {
        "label": "Users",
        "kind": 6,
        "importPath": "assignment_0924.routes.users",
        "description": "assignment_0924.routes.users",
        "peekOfCode": "class Users(MethodView):\n    def get(self, user_id):\n        user = User.query.get_or_404(user_id)\n        return {\"name\": user.name, 'email': user.email}\n    def put(self, user_id):\n        user = User.query.get_or_404(user_id)\n        user_data = request.json\n        user.name = user_data['name']\n        user.email = user_data['email']\n        db.session.commit()",
        "detail": "assignment_0924.routes.users",
        "documentation": {}
    },
    {
        "label": "user_blp",
        "kind": 5,
        "importPath": "assignment_0924.routes.users",
        "description": "assignment_0924.routes.users",
        "peekOfCode": "user_blp = Blueprint('Users', 'users', description='Operations on users', url_prefix='/users')\n@user_blp.route('/')\nclass UserList(MethodView):\n    def get(self):\n        users = User.query.all()\n        user_data = [{\"id\":user.id, \"name\": user.name, \"email\": user.email} for user in users]  # Convert to list\n        return jsonify(user_data)\n    def post(self):\n        print(\"요청은 오는가?\")\n        user_data = request.json",
        "detail": "assignment_0924.routes.users",
        "documentation": {}
    },
    {
        "label": "manage_boards",
        "kind": 2,
        "importPath": "assignment_0924.app",
        "description": "assignment_0924.app",
        "peekOfCode": "def manage_boards():\n    return render_template('boards.html')\n@app.route('/manage-users')\ndef manage_users():\n    return render_template('users.html')\nif __name__ == '__main__':\n    with app.app_context():\n        print(\"여기 실행?\")\n        db.create_all()\n    app.run(debug=True)",
        "detail": "assignment_0924.app",
        "documentation": {}
    },
    {
        "label": "manage_users",
        "kind": 2,
        "importPath": "assignment_0924.app",
        "description": "assignment_0924.app",
        "peekOfCode": "def manage_users():\n    return render_template('users.html')\nif __name__ == '__main__':\n    with app.app_context():\n        print(\"여기 실행?\")\n        db.create_all()\n    app.run(debug=True)",
        "detail": "assignment_0924.app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "assignment_0924.app",
        "description": "assignment_0924.app",
        "peekOfCode": "app = Flask(__name__)\npw = quote_plus(\"l3yl3yp0rt@$\")\napp.config['SQLALCHEMY_DATABASE_URI'] = f'mysql+pymysql://root:{pw}@localhost/study01'\n# 디버깅 1) pw에 @가 들어가 있어서 인식 오류, fstring으로 해결 2) schema 없음으로 인해 접속 안 되던것, MySQL에서 스키마 생성으로 해결.\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False    #True로 하면 리소스 많이 잡아먹어요\ndb.init_app(app)\n# bluepring 설정 및 등록\napp.config[\"API_TITLE\"] = \"My API\"\napp.config[\"API_VERSION\"] = \"v1\"\napp.config[\"OPENAPI_VERSION\"] = \"3.1.3\"",
        "detail": "assignment_0924.app",
        "documentation": {}
    },
    {
        "label": "pw",
        "kind": 5,
        "importPath": "assignment_0924.app",
        "description": "assignment_0924.app",
        "peekOfCode": "pw = quote_plus(\"l3yl3yp0rt@$\")\napp.config['SQLALCHEMY_DATABASE_URI'] = f'mysql+pymysql://root:{pw}@localhost/study01'\n# 디버깅 1) pw에 @가 들어가 있어서 인식 오류, fstring으로 해결 2) schema 없음으로 인해 접속 안 되던것, MySQL에서 스키마 생성으로 해결.\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False    #True로 하면 리소스 많이 잡아먹어요\ndb.init_app(app)\n# bluepring 설정 및 등록\napp.config[\"API_TITLE\"] = \"My API\"\napp.config[\"API_VERSION\"] = \"v1\"\napp.config[\"OPENAPI_VERSION\"] = \"3.1.3\"\napp.config[\"OPENAPI_URL_PREFIX\"] = \"/\"",
        "detail": "assignment_0924.app",
        "documentation": {}
    },
    {
        "label": "app.config['SQLALCHEMY_DATABASE_URI']",
        "kind": 5,
        "importPath": "assignment_0924.app",
        "description": "assignment_0924.app",
        "peekOfCode": "app.config['SQLALCHEMY_DATABASE_URI'] = f'mysql+pymysql://root:{pw}@localhost/study01'\n# 디버깅 1) pw에 @가 들어가 있어서 인식 오류, fstring으로 해결 2) schema 없음으로 인해 접속 안 되던것, MySQL에서 스키마 생성으로 해결.\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False    #True로 하면 리소스 많이 잡아먹어요\ndb.init_app(app)\n# bluepring 설정 및 등록\napp.config[\"API_TITLE\"] = \"My API\"\napp.config[\"API_VERSION\"] = \"v1\"\napp.config[\"OPENAPI_VERSION\"] = \"3.1.3\"\napp.config[\"OPENAPI_URL_PREFIX\"] = \"/\"\napp.config[\"OPENAPI_SWAGGER_UI_PATH\"] = \"/swagger-ui\"",
        "detail": "assignment_0924.app",
        "documentation": {}
    },
    {
        "label": "app.config['SQLALCHEMY_TRACK_MODIFICATIONS']",
        "kind": 5,
        "importPath": "assignment_0924.app",
        "description": "assignment_0924.app",
        "peekOfCode": "app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False    #True로 하면 리소스 많이 잡아먹어요\ndb.init_app(app)\n# bluepring 설정 및 등록\napp.config[\"API_TITLE\"] = \"My API\"\napp.config[\"API_VERSION\"] = \"v1\"\napp.config[\"OPENAPI_VERSION\"] = \"3.1.3\"\napp.config[\"OPENAPI_URL_PREFIX\"] = \"/\"\napp.config[\"OPENAPI_SWAGGER_UI_PATH\"] = \"/swagger-ui\"\napp.config[\"OPENAPI_SWAGGER_UI_URL\"] = \"https://cdn.jsdelivr.net/npm/swagger-ui-dist/\"\nfrom routes.users import user_blp",
        "detail": "assignment_0924.app",
        "documentation": {}
    },
    {
        "label": "app.config[\"API_TITLE\"]",
        "kind": 5,
        "importPath": "assignment_0924.app",
        "description": "assignment_0924.app",
        "peekOfCode": "app.config[\"API_TITLE\"] = \"My API\"\napp.config[\"API_VERSION\"] = \"v1\"\napp.config[\"OPENAPI_VERSION\"] = \"3.1.3\"\napp.config[\"OPENAPI_URL_PREFIX\"] = \"/\"\napp.config[\"OPENAPI_SWAGGER_UI_PATH\"] = \"/swagger-ui\"\napp.config[\"OPENAPI_SWAGGER_UI_URL\"] = \"https://cdn.jsdelivr.net/npm/swagger-ui-dist/\"\nfrom routes.users import user_blp\nfrom routes.board import board_blp\napi = Api(app)\napi.register_blueprint(user_blp)",
        "detail": "assignment_0924.app",
        "documentation": {}
    },
    {
        "label": "app.config[\"API_VERSION\"]",
        "kind": 5,
        "importPath": "assignment_0924.app",
        "description": "assignment_0924.app",
        "peekOfCode": "app.config[\"API_VERSION\"] = \"v1\"\napp.config[\"OPENAPI_VERSION\"] = \"3.1.3\"\napp.config[\"OPENAPI_URL_PREFIX\"] = \"/\"\napp.config[\"OPENAPI_SWAGGER_UI_PATH\"] = \"/swagger-ui\"\napp.config[\"OPENAPI_SWAGGER_UI_URL\"] = \"https://cdn.jsdelivr.net/npm/swagger-ui-dist/\"\nfrom routes.users import user_blp\nfrom routes.board import board_blp\napi = Api(app)\napi.register_blueprint(user_blp)\napi.register_blueprint(board_blp)",
        "detail": "assignment_0924.app",
        "documentation": {}
    },
    {
        "label": "app.config[\"OPENAPI_VERSION\"]",
        "kind": 5,
        "importPath": "assignment_0924.app",
        "description": "assignment_0924.app",
        "peekOfCode": "app.config[\"OPENAPI_VERSION\"] = \"3.1.3\"\napp.config[\"OPENAPI_URL_PREFIX\"] = \"/\"\napp.config[\"OPENAPI_SWAGGER_UI_PATH\"] = \"/swagger-ui\"\napp.config[\"OPENAPI_SWAGGER_UI_URL\"] = \"https://cdn.jsdelivr.net/npm/swagger-ui-dist/\"\nfrom routes.users import user_blp\nfrom routes.board import board_blp\napi = Api(app)\napi.register_blueprint(user_blp)\napi.register_blueprint(board_blp)\nfrom flask import render_template",
        "detail": "assignment_0924.app",
        "documentation": {}
    },
    {
        "label": "app.config[\"OPENAPI_URL_PREFIX\"]",
        "kind": 5,
        "importPath": "assignment_0924.app",
        "description": "assignment_0924.app",
        "peekOfCode": "app.config[\"OPENAPI_URL_PREFIX\"] = \"/\"\napp.config[\"OPENAPI_SWAGGER_UI_PATH\"] = \"/swagger-ui\"\napp.config[\"OPENAPI_SWAGGER_UI_URL\"] = \"https://cdn.jsdelivr.net/npm/swagger-ui-dist/\"\nfrom routes.users import user_blp\nfrom routes.board import board_blp\napi = Api(app)\napi.register_blueprint(user_blp)\napi.register_blueprint(board_blp)\nfrom flask import render_template\n@app.route('/manage-boards')",
        "detail": "assignment_0924.app",
        "documentation": {}
    },
    {
        "label": "app.config[\"OPENAPI_SWAGGER_UI_PATH\"]",
        "kind": 5,
        "importPath": "assignment_0924.app",
        "description": "assignment_0924.app",
        "peekOfCode": "app.config[\"OPENAPI_SWAGGER_UI_PATH\"] = \"/swagger-ui\"\napp.config[\"OPENAPI_SWAGGER_UI_URL\"] = \"https://cdn.jsdelivr.net/npm/swagger-ui-dist/\"\nfrom routes.users import user_blp\nfrom routes.board import board_blp\napi = Api(app)\napi.register_blueprint(user_blp)\napi.register_blueprint(board_blp)\nfrom flask import render_template\n@app.route('/manage-boards')\ndef manage_boards():",
        "detail": "assignment_0924.app",
        "documentation": {}
    },
    {
        "label": "app.config[\"OPENAPI_SWAGGER_UI_URL\"]",
        "kind": 5,
        "importPath": "assignment_0924.app",
        "description": "assignment_0924.app",
        "peekOfCode": "app.config[\"OPENAPI_SWAGGER_UI_URL\"] = \"https://cdn.jsdelivr.net/npm/swagger-ui-dist/\"\nfrom routes.users import user_blp\nfrom routes.board import board_blp\napi = Api(app)\napi.register_blueprint(user_blp)\napi.register_blueprint(board_blp)\nfrom flask import render_template\n@app.route('/manage-boards')\ndef manage_boards():\n    return render_template('boards.html')",
        "detail": "assignment_0924.app",
        "documentation": {}
    },
    {
        "label": "api",
        "kind": 5,
        "importPath": "assignment_0924.app",
        "description": "assignment_0924.app",
        "peekOfCode": "api = Api(app)\napi.register_blueprint(user_blp)\napi.register_blueprint(board_blp)\nfrom flask import render_template\n@app.route('/manage-boards')\ndef manage_boards():\n    return render_template('boards.html')\n@app.route('/manage-users')\ndef manage_users():\n    return render_template('users.html')",
        "detail": "assignment_0924.app",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "assignment_0924.db",
        "description": "assignment_0924.db",
        "peekOfCode": "db = SQLAlchemy()",
        "detail": "assignment_0924.db",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "assignment_0924.models",
        "description": "assignment_0924.models",
        "peekOfCode": "class User(db.Model):\n    __tablename__ = \"users\"\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(100), unique=True, nullable=False)\n    email = db.Column(db.String(100), unique=True, nullable=False)\n    boards = db.relationship('Board', back_populates='author', lazy='dynamic')\n\t# address = db.Column(db.String(120), unique=True, nullable=False)  # 추가된 필드\nclass Board(db.Model):\n    __tablename__ = \"boards\"\n    id = db.Column(db.Integer, primary_key=True)",
        "detail": "assignment_0924.models",
        "documentation": {}
    },
    {
        "label": "Board",
        "kind": 6,
        "importPath": "assignment_0924.models",
        "description": "assignment_0924.models",
        "peekOfCode": "class Board(db.Model):\n    __tablename__ = \"boards\"\n    id = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String(100), nullable=False)\n    content = db.Column(db.String(200))\n    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)\n    author = db.relationship('User', back_populates='boards')",
        "detail": "assignment_0924.models",
        "documentation": {}
    },
    {
        "label": "BookList",
        "kind": 6,
        "importPath": "bookmanage.api",
        "description": "bookmanage.api",
        "peekOfCode": "class BookList(MethodView):\n    @book_blp.response(200, BookSchema(many=True))\n    def get(self):\n        return books\n    # 200일땐 그냥 돌려주는것 같고...\n    @book_blp.arguments(BookSchema) #put같은 경우, arguments를 통해 스키마 검증을 함\n    @book_blp.response(201, BookSchema)\n    def post(self, new_data):\n        new_data['id'] = len(books) +1    #len에 1 추가하면 새 id값으로 적절하겠지?\n        books.append(new_data)",
        "detail": "bookmanage.api",
        "documentation": {}
    },
    {
        "label": "Book",
        "kind": 6,
        "importPath": "bookmanage.api",
        "description": "bookmanage.api",
        "peekOfCode": "class Book(MethodView):\n    @book_blp.response(200, BookSchema)\n    def get(self, book_id):\n        book = next((book for book in books if book['id'] == book_id), None)\n        if book is None:\n            abort(404, message = \"Book not found.\")\n        return book\n    # put(수정)\n    @book_blp.arguments(BookSchema)\n    @book_blp.response(200, BookSchema)",
        "detail": "bookmanage.api",
        "documentation": {}
    },
    {
        "label": "book_blp",
        "kind": 5,
        "importPath": "bookmanage.api",
        "description": "bookmanage.api",
        "peekOfCode": "book_blp = Blueprint('books', 'books', url_prefix='/books', description='Operations on books')\n# 데이터 저장소\nbooks = []\n# 엔드포인트 구현...\n@book_blp.route('/')\nclass BookList(MethodView):\n    @book_blp.response(200, BookSchema(many=True))\n    def get(self):\n        return books\n    # 200일땐 그냥 돌려주는것 같고...",
        "detail": "bookmanage.api",
        "documentation": {}
    },
    {
        "label": "books",
        "kind": 5,
        "importPath": "bookmanage.api",
        "description": "bookmanage.api",
        "peekOfCode": "books = []\n# 엔드포인트 구현...\n@book_blp.route('/')\nclass BookList(MethodView):\n    @book_blp.response(200, BookSchema(many=True))\n    def get(self):\n        return books\n    # 200일땐 그냥 돌려주는것 같고...\n    @book_blp.arguments(BookSchema) #put같은 경우, arguments를 통해 스키마 검증을 함\n    @book_blp.response(201, BookSchema)",
        "detail": "bookmanage.api",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "bookmanage.app",
        "description": "bookmanage.app",
        "peekOfCode": "app = Flask(__name__)\n# Flask-Smorest 설정 추가...\n# API와 블루프린트 등록...\n# OpenAPI 관련 설정\napp.config[\"API_TITLE\"] = \"My API\"\napp.config[\"API_VERSION\"] = \"v1\"\napp.config[\"OPENAPI_VERSION\"] = \"3.1.3\"\napp.config[\"OPENAPI_URL_PREFIX\"] = \"/\"\napp.config[\"OPENAPI_SWAGGER_UI_PATH\"] = \"/swagger-ui\"\napp.config[\"OPENAPI_SWAGGER_UI_URL\"] = \"https://cdn.jsdelivr.net/npm/swagger-ui-dist/\"",
        "detail": "bookmanage.app",
        "documentation": {}
    },
    {
        "label": "app.config[\"API_TITLE\"]",
        "kind": 5,
        "importPath": "bookmanage.app",
        "description": "bookmanage.app",
        "peekOfCode": "app.config[\"API_TITLE\"] = \"My API\"\napp.config[\"API_VERSION\"] = \"v1\"\napp.config[\"OPENAPI_VERSION\"] = \"3.1.3\"\napp.config[\"OPENAPI_URL_PREFIX\"] = \"/\"\napp.config[\"OPENAPI_SWAGGER_UI_PATH\"] = \"/swagger-ui\"\napp.config[\"OPENAPI_SWAGGER_UI_URL\"] = \"https://cdn.jsdelivr.net/npm/swagger-ui-dist/\"\napi = Api(app)\napi.register_blueprint(book_blp)\nif __name__ == \"__main__\":\n    app.run(debug=True)",
        "detail": "bookmanage.app",
        "documentation": {}
    },
    {
        "label": "app.config[\"API_VERSION\"]",
        "kind": 5,
        "importPath": "bookmanage.app",
        "description": "bookmanage.app",
        "peekOfCode": "app.config[\"API_VERSION\"] = \"v1\"\napp.config[\"OPENAPI_VERSION\"] = \"3.1.3\"\napp.config[\"OPENAPI_URL_PREFIX\"] = \"/\"\napp.config[\"OPENAPI_SWAGGER_UI_PATH\"] = \"/swagger-ui\"\napp.config[\"OPENAPI_SWAGGER_UI_URL\"] = \"https://cdn.jsdelivr.net/npm/swagger-ui-dist/\"\napi = Api(app)\napi.register_blueprint(book_blp)\nif __name__ == \"__main__\":\n    app.run(debug=True)",
        "detail": "bookmanage.app",
        "documentation": {}
    },
    {
        "label": "app.config[\"OPENAPI_VERSION\"]",
        "kind": 5,
        "importPath": "bookmanage.app",
        "description": "bookmanage.app",
        "peekOfCode": "app.config[\"OPENAPI_VERSION\"] = \"3.1.3\"\napp.config[\"OPENAPI_URL_PREFIX\"] = \"/\"\napp.config[\"OPENAPI_SWAGGER_UI_PATH\"] = \"/swagger-ui\"\napp.config[\"OPENAPI_SWAGGER_UI_URL\"] = \"https://cdn.jsdelivr.net/npm/swagger-ui-dist/\"\napi = Api(app)\napi.register_blueprint(book_blp)\nif __name__ == \"__main__\":\n    app.run(debug=True)",
        "detail": "bookmanage.app",
        "documentation": {}
    },
    {
        "label": "app.config[\"OPENAPI_URL_PREFIX\"]",
        "kind": 5,
        "importPath": "bookmanage.app",
        "description": "bookmanage.app",
        "peekOfCode": "app.config[\"OPENAPI_URL_PREFIX\"] = \"/\"\napp.config[\"OPENAPI_SWAGGER_UI_PATH\"] = \"/swagger-ui\"\napp.config[\"OPENAPI_SWAGGER_UI_URL\"] = \"https://cdn.jsdelivr.net/npm/swagger-ui-dist/\"\napi = Api(app)\napi.register_blueprint(book_blp)\nif __name__ == \"__main__\":\n    app.run(debug=True)",
        "detail": "bookmanage.app",
        "documentation": {}
    },
    {
        "label": "app.config[\"OPENAPI_SWAGGER_UI_PATH\"]",
        "kind": 5,
        "importPath": "bookmanage.app",
        "description": "bookmanage.app",
        "peekOfCode": "app.config[\"OPENAPI_SWAGGER_UI_PATH\"] = \"/swagger-ui\"\napp.config[\"OPENAPI_SWAGGER_UI_URL\"] = \"https://cdn.jsdelivr.net/npm/swagger-ui-dist/\"\napi = Api(app)\napi.register_blueprint(book_blp)\nif __name__ == \"__main__\":\n    app.run(debug=True)",
        "detail": "bookmanage.app",
        "documentation": {}
    },
    {
        "label": "app.config[\"OPENAPI_SWAGGER_UI_URL\"]",
        "kind": 5,
        "importPath": "bookmanage.app",
        "description": "bookmanage.app",
        "peekOfCode": "app.config[\"OPENAPI_SWAGGER_UI_URL\"] = \"https://cdn.jsdelivr.net/npm/swagger-ui-dist/\"\napi = Api(app)\napi.register_blueprint(book_blp)\nif __name__ == \"__main__\":\n    app.run(debug=True)",
        "detail": "bookmanage.app",
        "documentation": {}
    },
    {
        "label": "api",
        "kind": 5,
        "importPath": "bookmanage.app",
        "description": "bookmanage.app",
        "peekOfCode": "api = Api(app)\napi.register_blueprint(book_blp)\nif __name__ == \"__main__\":\n    app.run(debug=True)",
        "detail": "bookmanage.app",
        "documentation": {}
    },
    {
        "label": "BookSchema",
        "kind": 6,
        "importPath": "bookmanage.schemas",
        "description": "bookmanage.schemas",
        "peekOfCode": "class BookSchema(Schema):\n    title = fields.String(required=True)\n    author = fields.String(required=True)",
        "detail": "bookmanage.schemas",
        "documentation": {}
    },
    {
        "label": "BoardList",
        "kind": 6,
        "importPath": "FlaskDB.routes.board",
        "description": "FlaskDB.routes.board",
        "peekOfCode": "class BoardList(MethodView):\n    def get(self):\n        boards = Board.query.all()\n        return jsonify([{\"user_id\": board.user_id, \n                        \"id\": board.id,\n                        \"title\": board.title, \"content\": board.content, \"author\": board.author.name} for board in boards])\n    def post(self):\n        data = request.json\n        new_board = Board(title=data['title'], content=data['content'], user_id=data['user_id'])\n        db.session.add(new_board)",
        "detail": "FlaskDB.routes.board",
        "documentation": {}
    },
    {
        "label": "BoardResource",
        "kind": 6,
        "importPath": "FlaskDB.routes.board",
        "description": "FlaskDB.routes.board",
        "peekOfCode": "class BoardResource(MethodView):\n    def get(self, board_id):\n        board = Board.query.get_or_404(board_id)\n        return jsonify({\"title\": board.title, \"content\": board.content, \"author\": board.author.name})\n    def put(self, board_id):\n        board = Board.query.get_or_404(board_id)\n        data = request.json\n        board.title = data['title']\n        board.content = data['content']\n        db.session.commit()",
        "detail": "FlaskDB.routes.board",
        "documentation": {}
    },
    {
        "label": "board_blp",
        "kind": 5,
        "importPath": "FlaskDB.routes.board",
        "description": "FlaskDB.routes.board",
        "peekOfCode": "board_blp = Blueprint('Boards', 'boards', description='Operations on boards', url_prefix='/board')\n@board_blp.route('/')\nclass BoardList(MethodView):\n    def get(self):\n        boards = Board.query.all()\n        return jsonify([{\"user_id\": board.user_id, \n                        \"id\": board.id,\n                        \"title\": board.title, \"content\": board.content, \"author\": board.author.name} for board in boards])\n    def post(self):\n        data = request.json",
        "detail": "FlaskDB.routes.board",
        "documentation": {}
    },
    {
        "label": "UserList",
        "kind": 6,
        "importPath": "FlaskDB.routes.users",
        "description": "FlaskDB.routes.users",
        "peekOfCode": "class UserList(MethodView):\n    def get(self):\n        users = User.query.all()\n        user_data = [{\"id\":user.id, \"name\": user.name, \"email\": user.email} for user in users]  # Convert to list\n        return jsonify(user_data)\n    def post(self):\n        print(\"요청은 오는가?\")\n        user_data = request.json\n        new_user = User(name=user_data['name'], email=user_data['email'])\n        db.session.add(new_user)",
        "detail": "FlaskDB.routes.users",
        "documentation": {}
    },
    {
        "label": "Users",
        "kind": 6,
        "importPath": "FlaskDB.routes.users",
        "description": "FlaskDB.routes.users",
        "peekOfCode": "class Users(MethodView):\n    def get(self, user_id):\n        user = User.query.get_or_404(user_id)\n        return {\"name\": user.name, 'email': user.email}\n    def put(self, user_id):\n        user = User.query.get_or_404(user_id)\n        user_data = request.json\n        user.name = user_data['name']\n        user.email = user_data['email']\n        db.session.commit()",
        "detail": "FlaskDB.routes.users",
        "documentation": {}
    },
    {
        "label": "user_blp",
        "kind": 5,
        "importPath": "FlaskDB.routes.users",
        "description": "FlaskDB.routes.users",
        "peekOfCode": "user_blp = Blueprint('Users', 'users', description='Operations on users', url_prefix='/users')\n@user_blp.route('/')\nclass UserList(MethodView):\n    def get(self):\n        users = User.query.all()\n        user_data = [{\"id\":user.id, \"name\": user.name, \"email\": user.email} for user in users]  # Convert to list\n        return jsonify(user_data)\n    def post(self):\n        print(\"요청은 오는가?\")\n        user_data = request.json",
        "detail": "FlaskDB.routes.users",
        "documentation": {}
    },
    {
        "label": "manage_boards",
        "kind": 2,
        "importPath": "FlaskDB.app",
        "description": "FlaskDB.app",
        "peekOfCode": "def manage_boards():\n    return render_template('boards.html')\n@app.route('/manage-users')\ndef manage_users():\n    return render_template('users.html')\nif __name__ == '__main__':\n    with app.app_context():\n        print(\"여기 실행?\")\n        db.create_all()\n    app.run(debug=True)",
        "detail": "FlaskDB.app",
        "documentation": {}
    },
    {
        "label": "manage_users",
        "kind": 2,
        "importPath": "FlaskDB.app",
        "description": "FlaskDB.app",
        "peekOfCode": "def manage_users():\n    return render_template('users.html')\nif __name__ == '__main__':\n    with app.app_context():\n        print(\"여기 실행?\")\n        db.create_all()\n    app.run(debug=True)",
        "detail": "FlaskDB.app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "FlaskDB.app",
        "description": "FlaskDB.app",
        "peekOfCode": "app = Flask(__name__)\npw = quote_plus(\"l3yl3yp0rt@$\")\n# url문제 수정해야 하는데 일단 보류\napp.config['SQLALCHEMY_DATABASE_URI'] = f'mysql+pymysql://root:{pw}@localhost/study01'\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False    #True로 하면 리소스 많이 잡아먹어요\ndb.init_app(app)\nmigrate = Migrate(app, db)\n# bluepring 설정 및 등록\napp.config[\"API_TITLE\"] = \"My API\"\napp.config[\"API_VERSION\"] = \"v1\"",
        "detail": "FlaskDB.app",
        "documentation": {}
    },
    {
        "label": "pw",
        "kind": 5,
        "importPath": "FlaskDB.app",
        "description": "FlaskDB.app",
        "peekOfCode": "pw = quote_plus(\"l3yl3yp0rt@$\")\n# url문제 수정해야 하는데 일단 보류\napp.config['SQLALCHEMY_DATABASE_URI'] = f'mysql+pymysql://root:{pw}@localhost/study01'\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False    #True로 하면 리소스 많이 잡아먹어요\ndb.init_app(app)\nmigrate = Migrate(app, db)\n# bluepring 설정 및 등록\napp.config[\"API_TITLE\"] = \"My API\"\napp.config[\"API_VERSION\"] = \"v1\"\napp.config[\"OPENAPI_VERSION\"] = \"3.1.3\"",
        "detail": "FlaskDB.app",
        "documentation": {}
    },
    {
        "label": "app.config['SQLALCHEMY_DATABASE_URI']",
        "kind": 5,
        "importPath": "FlaskDB.app",
        "description": "FlaskDB.app",
        "peekOfCode": "app.config['SQLALCHEMY_DATABASE_URI'] = f'mysql+pymysql://root:{pw}@localhost/study01'\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False    #True로 하면 리소스 많이 잡아먹어요\ndb.init_app(app)\nmigrate = Migrate(app, db)\n# bluepring 설정 및 등록\napp.config[\"API_TITLE\"] = \"My API\"\napp.config[\"API_VERSION\"] = \"v1\"\napp.config[\"OPENAPI_VERSION\"] = \"3.1.3\"\napp.config[\"OPENAPI_URL_PREFIX\"] = \"/\"\napp.config[\"OPENAPI_SWAGGER_UI_PATH\"] = \"/swagger-ui\"",
        "detail": "FlaskDB.app",
        "documentation": {}
    },
    {
        "label": "app.config['SQLALCHEMY_TRACK_MODIFICATIONS']",
        "kind": 5,
        "importPath": "FlaskDB.app",
        "description": "FlaskDB.app",
        "peekOfCode": "app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False    #True로 하면 리소스 많이 잡아먹어요\ndb.init_app(app)\nmigrate = Migrate(app, db)\n# bluepring 설정 및 등록\napp.config[\"API_TITLE\"] = \"My API\"\napp.config[\"API_VERSION\"] = \"v1\"\napp.config[\"OPENAPI_VERSION\"] = \"3.1.3\"\napp.config[\"OPENAPI_URL_PREFIX\"] = \"/\"\napp.config[\"OPENAPI_SWAGGER_UI_PATH\"] = \"/swagger-ui\"\napp.config[\"OPENAPI_SWAGGER_UI_URL\"] = \"https://cdn.jsdelivr.net/npm/swagger-ui-dist/\"",
        "detail": "FlaskDB.app",
        "documentation": {}
    },
    {
        "label": "migrate",
        "kind": 5,
        "importPath": "FlaskDB.app",
        "description": "FlaskDB.app",
        "peekOfCode": "migrate = Migrate(app, db)\n# bluepring 설정 및 등록\napp.config[\"API_TITLE\"] = \"My API\"\napp.config[\"API_VERSION\"] = \"v1\"\napp.config[\"OPENAPI_VERSION\"] = \"3.1.3\"\napp.config[\"OPENAPI_URL_PREFIX\"] = \"/\"\napp.config[\"OPENAPI_SWAGGER_UI_PATH\"] = \"/swagger-ui\"\napp.config[\"OPENAPI_SWAGGER_UI_URL\"] = \"https://cdn.jsdelivr.net/npm/swagger-ui-dist/\"\nfrom routes.users import user_blp\nfrom routes.board import board_blp",
        "detail": "FlaskDB.app",
        "documentation": {}
    },
    {
        "label": "app.config[\"API_TITLE\"]",
        "kind": 5,
        "importPath": "FlaskDB.app",
        "description": "FlaskDB.app",
        "peekOfCode": "app.config[\"API_TITLE\"] = \"My API\"\napp.config[\"API_VERSION\"] = \"v1\"\napp.config[\"OPENAPI_VERSION\"] = \"3.1.3\"\napp.config[\"OPENAPI_URL_PREFIX\"] = \"/\"\napp.config[\"OPENAPI_SWAGGER_UI_PATH\"] = \"/swagger-ui\"\napp.config[\"OPENAPI_SWAGGER_UI_URL\"] = \"https://cdn.jsdelivr.net/npm/swagger-ui-dist/\"\nfrom routes.users import user_blp\nfrom routes.board import board_blp\napi = Api(app)\napi.register_blueprint(user_blp)",
        "detail": "FlaskDB.app",
        "documentation": {}
    },
    {
        "label": "app.config[\"API_VERSION\"]",
        "kind": 5,
        "importPath": "FlaskDB.app",
        "description": "FlaskDB.app",
        "peekOfCode": "app.config[\"API_VERSION\"] = \"v1\"\napp.config[\"OPENAPI_VERSION\"] = \"3.1.3\"\napp.config[\"OPENAPI_URL_PREFIX\"] = \"/\"\napp.config[\"OPENAPI_SWAGGER_UI_PATH\"] = \"/swagger-ui\"\napp.config[\"OPENAPI_SWAGGER_UI_URL\"] = \"https://cdn.jsdelivr.net/npm/swagger-ui-dist/\"\nfrom routes.users import user_blp\nfrom routes.board import board_blp\napi = Api(app)\napi.register_blueprint(user_blp)\napi.register_blueprint(board_blp)",
        "detail": "FlaskDB.app",
        "documentation": {}
    },
    {
        "label": "app.config[\"OPENAPI_VERSION\"]",
        "kind": 5,
        "importPath": "FlaskDB.app",
        "description": "FlaskDB.app",
        "peekOfCode": "app.config[\"OPENAPI_VERSION\"] = \"3.1.3\"\napp.config[\"OPENAPI_URL_PREFIX\"] = \"/\"\napp.config[\"OPENAPI_SWAGGER_UI_PATH\"] = \"/swagger-ui\"\napp.config[\"OPENAPI_SWAGGER_UI_URL\"] = \"https://cdn.jsdelivr.net/npm/swagger-ui-dist/\"\nfrom routes.users import user_blp\nfrom routes.board import board_blp\napi = Api(app)\napi.register_blueprint(user_blp)\napi.register_blueprint(board_blp)\nfrom flask import render_template",
        "detail": "FlaskDB.app",
        "documentation": {}
    },
    {
        "label": "app.config[\"OPENAPI_URL_PREFIX\"]",
        "kind": 5,
        "importPath": "FlaskDB.app",
        "description": "FlaskDB.app",
        "peekOfCode": "app.config[\"OPENAPI_URL_PREFIX\"] = \"/\"\napp.config[\"OPENAPI_SWAGGER_UI_PATH\"] = \"/swagger-ui\"\napp.config[\"OPENAPI_SWAGGER_UI_URL\"] = \"https://cdn.jsdelivr.net/npm/swagger-ui-dist/\"\nfrom routes.users import user_blp\nfrom routes.board import board_blp\napi = Api(app)\napi.register_blueprint(user_blp)\napi.register_blueprint(board_blp)\nfrom flask import render_template\n@app.route('/manage-boards')",
        "detail": "FlaskDB.app",
        "documentation": {}
    },
    {
        "label": "app.config[\"OPENAPI_SWAGGER_UI_PATH\"]",
        "kind": 5,
        "importPath": "FlaskDB.app",
        "description": "FlaskDB.app",
        "peekOfCode": "app.config[\"OPENAPI_SWAGGER_UI_PATH\"] = \"/swagger-ui\"\napp.config[\"OPENAPI_SWAGGER_UI_URL\"] = \"https://cdn.jsdelivr.net/npm/swagger-ui-dist/\"\nfrom routes.users import user_blp\nfrom routes.board import board_blp\napi = Api(app)\napi.register_blueprint(user_blp)\napi.register_blueprint(board_blp)\nfrom flask import render_template\n@app.route('/manage-boards')\ndef manage_boards():",
        "detail": "FlaskDB.app",
        "documentation": {}
    },
    {
        "label": "app.config[\"OPENAPI_SWAGGER_UI_URL\"]",
        "kind": 5,
        "importPath": "FlaskDB.app",
        "description": "FlaskDB.app",
        "peekOfCode": "app.config[\"OPENAPI_SWAGGER_UI_URL\"] = \"https://cdn.jsdelivr.net/npm/swagger-ui-dist/\"\nfrom routes.users import user_blp\nfrom routes.board import board_blp\napi = Api(app)\napi.register_blueprint(user_blp)\napi.register_blueprint(board_blp)\nfrom flask import render_template\n@app.route('/manage-boards')\ndef manage_boards():\n    return render_template('boards.html')",
        "detail": "FlaskDB.app",
        "documentation": {}
    },
    {
        "label": "api",
        "kind": 5,
        "importPath": "FlaskDB.app",
        "description": "FlaskDB.app",
        "peekOfCode": "api = Api(app)\napi.register_blueprint(user_blp)\napi.register_blueprint(board_blp)\nfrom flask import render_template\n@app.route('/manage-boards')\ndef manage_boards():\n    return render_template('boards.html')\n@app.route('/manage-users')\ndef manage_users():\n    return render_template('users.html')",
        "detail": "FlaskDB.app",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "FlaskDB.db",
        "description": "FlaskDB.db",
        "peekOfCode": "db = SQLAlchemy()",
        "detail": "FlaskDB.db",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "FlaskDB.models",
        "description": "FlaskDB.models",
        "peekOfCode": "class User(db.Model):\n    __tablename__ = \"users\"\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(100), unique=True, nullable=False)\n    email = db.Column(db.String(100), unique=True, nullable=False)\n    address = db.Column(db.String(200), nullable=False)\n    boards = db.relationship('Board', back_populates='author', lazy='dynamic')\n\t# address = db.Column(db.String(120), unique=True, nullable=False)  # 추가된 필드\nclass Board(db.Model):\n    __tablename__ = \"boards\"",
        "detail": "FlaskDB.models",
        "documentation": {}
    },
    {
        "label": "Board",
        "kind": 6,
        "importPath": "FlaskDB.models",
        "description": "FlaskDB.models",
        "peekOfCode": "class Board(db.Model):\n    __tablename__ = \"boards\"\n    id = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String(100), nullable=False)\n    content = db.Column(db.String(200))\n    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)\n    author = db.relationship('User', back_populates='boards')",
        "detail": "FlaskDB.models",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "Flask_liveclass.0923.action02",
        "description": "Flask_liveclass.0923.action02",
        "peekOfCode": "def index():\n    return jsonify(message = \"Hello, OZ BE14!\")\nif __name__ == \"__main__\":\n    app.run(debug=True)",
        "detail": "Flask_liveclass.0923.action02",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "Flask_liveclass.0923.action02",
        "description": "Flask_liveclass.0923.action02",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/hello-json\")\ndef index():\n    return jsonify(message = \"Hello, OZ BE14!\")\nif __name__ == \"__main__\":\n    app.run(debug=True)",
        "detail": "Flask_liveclass.0923.action02",
        "documentation": {}
    },
    {
        "label": "hello",
        "kind": 2,
        "importPath": "Flask_liveclass.0923.action03",
        "description": "Flask_liveclass.0923.action03",
        "peekOfCode": "def hello():\n    \"\"\"\n    Hello API\n    ---\n    responses:\n      200:\n        description: 성공 응답\n        schema:\n          type: object\n          properties:",
        "detail": "Flask_liveclass.0923.action03",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "Flask_liveclass.0923.action03",
        "description": "Flask_liveclass.0923.action03",
        "peekOfCode": "app = Flask(__name__)\nswagger = Swagger(app)\n@app.route('/hello')\ndef hello():\n    \"\"\"\n    Hello API\n    ---\n    responses:\n      200:\n        description: 성공 응답",
        "detail": "Flask_liveclass.0923.action03",
        "documentation": {}
    },
    {
        "label": "swagger",
        "kind": 5,
        "importPath": "Flask_liveclass.0923.action03",
        "description": "Flask_liveclass.0923.action03",
        "peekOfCode": "swagger = Swagger(app)\n@app.route('/hello')\ndef hello():\n    \"\"\"\n    Hello API\n    ---\n    responses:\n      200:\n        description: 성공 응답\n        schema:",
        "detail": "Flask_liveclass.0923.action03",
        "documentation": {}
    },
    {
        "label": "get_todos",
        "kind": 2,
        "importPath": "Flask_liveclass.0923.action04",
        "description": "Flask_liveclass.0923.action04",
        "peekOfCode": "def get_todos():\n    return jsonify(todos)\n#2. 특정 항목 조회: GET\n@app.route(\"/todos/<int:todo_id>\", methods=[\"GET\"])\ndef get_todo(todo_id):\n    task = todos.get(todo_id)\n    if not task:\n        return jsonify({\"error\": \"Todo not found\"}), 404\n    return jsonify({todo_id: task})\n#3. 항목 추가: POST",
        "detail": "Flask_liveclass.0923.action04",
        "documentation": {}
    },
    {
        "label": "get_todo",
        "kind": 2,
        "importPath": "Flask_liveclass.0923.action04",
        "description": "Flask_liveclass.0923.action04",
        "peekOfCode": "def get_todo(todo_id):\n    task = todos.get(todo_id)\n    if not task:\n        return jsonify({\"error\": \"Todo not found\"}), 404\n    return jsonify({todo_id: task})\n#3. 항목 추가: POST\n@app.route(\"/todos\", methods = [\"POST\"])\ndef create_todo():\n    data = request.get_json()\n    new_id = max(todos.keys()) + 1 if todos else 1",
        "detail": "Flask_liveclass.0923.action04",
        "documentation": {}
    },
    {
        "label": "create_todo",
        "kind": 2,
        "importPath": "Flask_liveclass.0923.action04",
        "description": "Flask_liveclass.0923.action04",
        "peekOfCode": "def create_todo():\n    data = request.get_json()\n    new_id = max(todos.keys()) + 1 if todos else 1\n    todos[new_id] = data[\"task\"]\n    return jsonify({new_id: todos[new_id]}), 201\n#200: ok\n#201: created: 내가 뭘 만들었다.\n#204: no content: 작동은 잘 되는데 컨텐츠가 없음\n#4. 항목 수정: PUT, PATCH\n@app.route(\"/todos/<int:todo_id>\", methods=[\"PUT\"])",
        "detail": "Flask_liveclass.0923.action04",
        "documentation": {}
    },
    {
        "label": "update_todo",
        "kind": 2,
        "importPath": "Flask_liveclass.0923.action04",
        "description": "Flask_liveclass.0923.action04",
        "peekOfCode": "def update_todo(todo_id):\n    if todo_id not in todos:\n        return jsonify({\"error\": \"Todo not found\"}), 404\n    data = request.get_json()\n    todos[todo_id] = data[\"task\"]\n    return jsonify({todo_id: todos[todo_id]})\n#5. 항목 삭제: delete\n@app.route('/todos/<int:todo_id>', methods=[\"DELETE\"])\ndef delete_todo(todo_id):\n    if todo_id not in todos:",
        "detail": "Flask_liveclass.0923.action04",
        "documentation": {}
    },
    {
        "label": "delete_todo",
        "kind": 2,
        "importPath": "Flask_liveclass.0923.action04",
        "description": "Flask_liveclass.0923.action04",
        "peekOfCode": "def delete_todo(todo_id):\n    if todo_id not in todos:\n        return jsonify({\"error\": \"Todo not found\"}, 404)\n    deleted = todos.pop(todo_id)\n    return jsonify({\"deleted\": \"삭제 완료\"})\n# 400 -> bad request: 코딩 문제\n# 401 -> unauthorized:\n# 403 -> forbidden: \n# 404 -> not found:\n# 409 -> conflict:",
        "detail": "Flask_liveclass.0923.action04",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "Flask_liveclass.0923.action04",
        "description": "Flask_liveclass.0923.action04",
        "peekOfCode": "app = Flask(__name__)\nswagger = Swagger(app)\ntodos = {\n    1: \"Velog 작성\",\n    2: \"수준별학습 과제\",\n    3: \"Flask 수업 & 노션 과제 제출\",\n    4: \"운동가기\"\n}\n#1. 전체 목록 조회: GET\n@app.route(\"/todos\", methods=[\"GET\"])",
        "detail": "Flask_liveclass.0923.action04",
        "documentation": {}
    },
    {
        "label": "swagger",
        "kind": 5,
        "importPath": "Flask_liveclass.0923.action04",
        "description": "Flask_liveclass.0923.action04",
        "peekOfCode": "swagger = Swagger(app)\ntodos = {\n    1: \"Velog 작성\",\n    2: \"수준별학습 과제\",\n    3: \"Flask 수업 & 노션 과제 제출\",\n    4: \"운동가기\"\n}\n#1. 전체 목록 조회: GET\n@app.route(\"/todos\", methods=[\"GET\"])\ndef get_todos():",
        "detail": "Flask_liveclass.0923.action04",
        "documentation": {}
    },
    {
        "label": "todos",
        "kind": 5,
        "importPath": "Flask_liveclass.0923.action04",
        "description": "Flask_liveclass.0923.action04",
        "peekOfCode": "todos = {\n    1: \"Velog 작성\",\n    2: \"수준별학습 과제\",\n    3: \"Flask 수업 & 노션 과제 제출\",\n    4: \"운동가기\"\n}\n#1. 전체 목록 조회: GET\n@app.route(\"/todos\", methods=[\"GET\"])\ndef get_todos():\n    return jsonify(todos)",
        "detail": "Flask_liveclass.0923.action04",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "Flask_liveclass.0923.active01",
        "description": "Flask_liveclass.0923.active01",
        "peekOfCode": "def index():\n    return render_template('index.html')\n@app.route(\"/survey\")\ndef survey():\n    #설문 문항\n    questions = [\n        \"오늘 기분은:\",\n        \"어제 수업은:\",\n        \"앞으로 배우고 싶은 내용은:\"\n    ]",
        "detail": "Flask_liveclass.0923.active01",
        "documentation": {}
    },
    {
        "label": "survey",
        "kind": 2,
        "importPath": "Flask_liveclass.0923.active01",
        "description": "Flask_liveclass.0923.active01",
        "peekOfCode": "def survey():\n    #설문 문항\n    questions = [\n        \"오늘 기분은:\",\n        \"어제 수업은:\",\n        \"앞으로 배우고 싶은 내용은:\"\n    ]\n    return render_template('survey.html', questions = questions)\n@app.route(\"/result\", methods = [\"GET\"])\n# 메서드 한 번 물어봐야겠다...",
        "detail": "Flask_liveclass.0923.active01",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 2,
        "importPath": "Flask_liveclass.0923.active01",
        "description": "Flask_liveclass.0923.active01",
        "peekOfCode": "def result():\n    answers = request.args.getlist(\"answers\", \"N/A\")\n    #query string에서 답변 받기: getlist 사용\n    return render_template(\"result.html\", answers=answers)\nif __name__ == \"__main__\":\n    app.run(debug=True)",
        "detail": "Flask_liveclass.0923.active01",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "Flask_liveclass.0923.active01",
        "description": "Flask_liveclass.0923.active01",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/\")\ndef index():\n    return render_template('index.html')\n@app.route(\"/survey\")\ndef survey():\n    #설문 문항\n    questions = [\n        \"오늘 기분은:\",\n        \"어제 수업은:\",",
        "detail": "Flask_liveclass.0923.active01",
        "documentation": {}
    },
    {
        "label": "DATABASE_URL",
        "kind": 5,
        "importPath": "Flask_liveclass.0924.action01",
        "description": "Flask_liveclass.0924.action01",
        "peekOfCode": "DATABASE_URL = \"sqlite:///./test.db\"\nengine = create_engine(DATABASE_URL, echo = True)\nBase = declarative_base()\nSessionLocal = sessionmaker(bind = engine)\n# 테이블 생성\nBase.metadata.create_all(bind=engine)",
        "detail": "Flask_liveclass.0924.action01",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "Flask_liveclass.0924.action01",
        "description": "Flask_liveclass.0924.action01",
        "peekOfCode": "engine = create_engine(DATABASE_URL, echo = True)\nBase = declarative_base()\nSessionLocal = sessionmaker(bind = engine)\n# 테이블 생성\nBase.metadata.create_all(bind=engine)",
        "detail": "Flask_liveclass.0924.action01",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "Flask_liveclass.0924.action01",
        "description": "Flask_liveclass.0924.action01",
        "peekOfCode": "Base = declarative_base()\nSessionLocal = sessionmaker(bind = engine)\n# 테이블 생성\nBase.metadata.create_all(bind=engine)",
        "detail": "Flask_liveclass.0924.action01",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "kind": 5,
        "importPath": "Flask_liveclass.0924.action01",
        "description": "Flask_liveclass.0924.action01",
        "peekOfCode": "SessionLocal = sessionmaker(bind = engine)\n# 테이블 생성\nBase.metadata.create_all(bind=engine)",
        "detail": "Flask_liveclass.0924.action01",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "Flask_liveclass.0924.action02",
        "description": "Flask_liveclass.0924.action02",
        "peekOfCode": "class User(Base):\n    __tablename__ = \"users\"\n    id = Column(Integer, primary_key = True, index = True)\n    name = Column(String, nullable = False)\n    email = Column(String, unique = True, index = True)\n    #요건 디버깅용. 객체 프린트 예쁘게 하는 용도. __str__은 유저에게(=남에게) 보여주기 위한, 출력용.\n    def __repr__(self):\n        return f\"<User(id={self.id}, name='{self.name}`, email=`{self.email}`)>\"\n# 3. 데이터베이스 연결 (SQLite 사용)\nengine = create_engine(\"sqlite:///users.db\", echo = True)",
        "detail": "Flask_liveclass.0924.action02",
        "documentation": {}
    },
    {
        "label": "run_practice",
        "kind": 2,
        "importPath": "Flask_liveclass.0924.action02",
        "description": "Flask_liveclass.0924.action02",
        "peekOfCode": "def run_practice():\n    \"\"\"데이터베이스 실제 핸들링 코드\"\"\"\n    db = SessionLocal() #데이터베이스 쓸 거라는 선언\n    # 데이터 생성: create\n    # 이렇게 쓸 수도 있겠지만: db.add(User(name=\"OZ\"))\n    new_user = User(name=\"OZ\")\n    db.add(new_user)\n    db.commit\n    # 데이터 조회Read\n    # SELECT * FROM ~ 이 밑에 있는 query()에 해당하는것",
        "detail": "Flask_liveclass.0924.action02",
        "documentation": {}
    },
    {
        "label": "run_single",
        "kind": 2,
        "importPath": "Flask_liveclass.0924.action02",
        "description": "Flask_liveclass.0924.action02",
        "peekOfCode": "def run_single():\n    \"\"\"데이터베이스 실제 핸들링 코드\"\"\"\n    db = SessionLocal() #데이터베이스 쓸 거라는 선언\n    # 데이터 생성: create\n    new_user = User(name=\"OZ\")\n    db.add(new_user)\n    db.commit\n    # 데이터 조회Read\n    users = db.query(User).all() \n    # 여러 유저 동시 조회",
        "detail": "Flask_liveclass.0924.action02",
        "documentation": {}
    },
    {
        "label": "run_bulk",
        "kind": 2,
        "importPath": "Flask_liveclass.0924.action02",
        "description": "Flask_liveclass.0924.action02",
        "peekOfCode": "def run_bulk():\n    db = SessionLocal()\n    # create\n    # single_add는: db.add(User(name=\"OZ\"))\n    # 복수로 등록은?\n    # db.add_all([\n    #    User(name=\"한율\"),\n    #    User(name=\"조교\"),\n    #    User(name=\"god\"),\n    #    User(name=\"천사\"),",
        "detail": "Flask_liveclass.0924.action02",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "Flask_liveclass.0924.action02",
        "description": "Flask_liveclass.0924.action02",
        "peekOfCode": "Base = declarative_base()\n#2. 테이블 정의: User 모델\nclass User(Base):\n    __tablename__ = \"users\"\n    id = Column(Integer, primary_key = True, index = True)\n    name = Column(String, nullable = False)\n    email = Column(String, unique = True, index = True)\n    #요건 디버깅용. 객체 프린트 예쁘게 하는 용도. __str__은 유저에게(=남에게) 보여주기 위한, 출력용.\n    def __repr__(self):\n        return f\"<User(id={self.id}, name='{self.name}`, email=`{self.email}`)>\"",
        "detail": "Flask_liveclass.0924.action02",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "Flask_liveclass.0924.action02",
        "description": "Flask_liveclass.0924.action02",
        "peekOfCode": "engine = create_engine(\"sqlite:///users.db\", echo = True)\n# 이제 users.db가 생성될 것임.\n# 4. 테이블 생성\nBase.metadata.create_all(bind=engine)\n# 4번에서 이미 테이블이 있을때 바인딩만 해주는거랑 새로 생성하는거랑 다를까요?\n# 아니면 원래 바인딩이 기능인데 해당 테이블이 없으면 새로 만들어주는걸까요?\n# \n# 5. session 준비\nSessionLocal = sessionmaker(bind=engine)\ndef run_practice():",
        "detail": "Flask_liveclass.0924.action02",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "kind": 5,
        "importPath": "Flask_liveclass.0924.action02",
        "description": "Flask_liveclass.0924.action02",
        "peekOfCode": "SessionLocal = sessionmaker(bind=engine)\ndef run_practice():\n    \"\"\"데이터베이스 실제 핸들링 코드\"\"\"\n    db = SessionLocal() #데이터베이스 쓸 거라는 선언\n    # 데이터 생성: create\n    # 이렇게 쓸 수도 있겠지만: db.add(User(name=\"OZ\"))\n    new_user = User(name=\"OZ\")\n    db.add(new_user)\n    db.commit\n    # 데이터 조회Read",
        "detail": "Flask_liveclass.0924.action02",
        "documentation": {}
    },
    {
        "label": "Todo",
        "kind": 6,
        "importPath": "Flask_liveclass.0924.action03",
        "description": "Flask_liveclass.0924.action03",
        "peekOfCode": "class Todo(Base):\n    __tablename__ = \"todos\"\n    id = Column(Integer, primary_key = True, index = True)\n    task = Column(String, nullable = False)\n    def __repr__(self):\n        return f\"<Todo(id={self.id}, task='{self.task}`)>\"\nBase.metadata.create_all(bind=engine)\n# todos = {\n#     1: \"Velog 작성\",\n#     2: \"수준별학습 과제\",",
        "detail": "Flask_liveclass.0924.action03",
        "documentation": {}
    },
    {
        "label": "get_todos",
        "kind": 2,
        "importPath": "Flask_liveclass.0924.action03",
        "description": "Flask_liveclass.0924.action03",
        "peekOfCode": "def get_todos():\n    db = SessionLocal()\n    todos = db.query(Todo).all()\n    db.close()   # db가 항상 닫혀있어야 하기 때문에 위에서 먼저 올리는거임\n    # return jsonify(todos) 으로 처리해도 되지만 ↓이 더 이쁨\n    return jsonify([{\"id\": t.id, \"task\": t.task} for t in todos])\n#2. 특정 항목 조회: GET\n@app.route(\"/todos/<int:todo_id>\", methods=[\"GET\"])\ndef get_todo(todo_id):\n    db = SessionLocal()",
        "detail": "Flask_liveclass.0924.action03",
        "documentation": {}
    },
    {
        "label": "get_todo",
        "kind": 2,
        "importPath": "Flask_liveclass.0924.action03",
        "description": "Flask_liveclass.0924.action03",
        "peekOfCode": "def get_todo(todo_id):\n    db = SessionLocal()\n    todo = db.query(Todo).get(todo_id)\n    db.close()\n    if not todo:\n        return jsonify({\"error\": \"Todo not found\"}), 404\n    return jsonify({\"id\": todo.id, \"task\": todo.task})\n#3. 항목 추가: POST\n@app.route(\"/todos\", methods = [\"POST\"])\ndef create_todo():",
        "detail": "Flask_liveclass.0924.action03",
        "documentation": {}
    },
    {
        "label": "create_todo",
        "kind": 2,
        "importPath": "Flask_liveclass.0924.action03",
        "description": "Flask_liveclass.0924.action03",
        "peekOfCode": "def create_todo():\n    data = request.get_json()\n    db = SessionLocal()\n    # 데이터 삽입\n    new_todo = Todo(task=data[\"task\"])\n    db.add(new_todo)\n    db.commit()\n    db.refresh(new_todo)  #commit 이후로 자동 생성된 id 불러오기\n    db.close()\n    return jsonify({\"id\": new_todo.id, \"task\": new_todo.task}), 201",
        "detail": "Flask_liveclass.0924.action03",
        "documentation": {}
    },
    {
        "label": "update_todo",
        "kind": 2,
        "importPath": "Flask_liveclass.0924.action03",
        "description": "Flask_liveclass.0924.action03",
        "peekOfCode": "def update_todo(todo_id):\n    data = request.get_json()\n    db = SessionLocal()\n    # db에서 항목 찾기\n    todo = db.query(Todo).get(todo_id)\n    if not todo: #못 찾으면? 404 반환\n        db.close()\n        return jsonify({\"error\": \"Todo not found\"}), 404\n    # 있으면 이렇게, 데이터가 있으니 업데이트\n    todo.task = data[\"task\"]",
        "detail": "Flask_liveclass.0924.action03",
        "documentation": {}
    },
    {
        "label": "delete_todo",
        "kind": 2,
        "importPath": "Flask_liveclass.0924.action03",
        "description": "Flask_liveclass.0924.action03",
        "peekOfCode": "def delete_todo(todo_id):\n    db = SessionLocal()\n    # db에서 항목 찾기\n    todo = db.query(Todo).get(todo_id)\n    if not todo: # 데이터 없을 시 바로 db close\n        db.close()\n        return jsonify({\"error\": \"Todo not found\"}, 404)\n    # 데이터 삭제\n    db.delete(todo)\n    db.commit()",
        "detail": "Flask_liveclass.0924.action03",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "Flask_liveclass.0924.action03",
        "description": "Flask_liveclass.0924.action03",
        "peekOfCode": "app = Flask(__name__)\n## db 설정 ##\nBASE_DIR = os.path.dirname(__file__)\nINSTANCE_DIR = os.path.join(BASE_DIR, \"instance\")\nos.makedirs(INSTANCE_DIR, exist_ok=True)\nDATABASE_URL = f\"sqlite:///{os.path.join(INSTANCE_DIR, \"todos.db\")}\"\nengine = create_engine(\n    DATABASE_URL,\n    echo=True\n)",
        "detail": "Flask_liveclass.0924.action03",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "Flask_liveclass.0924.action03",
        "description": "Flask_liveclass.0924.action03",
        "peekOfCode": "BASE_DIR = os.path.dirname(__file__)\nINSTANCE_DIR = os.path.join(BASE_DIR, \"instance\")\nos.makedirs(INSTANCE_DIR, exist_ok=True)\nDATABASE_URL = f\"sqlite:///{os.path.join(INSTANCE_DIR, \"todos.db\")}\"\nengine = create_engine(\n    DATABASE_URL,\n    echo=True\n)\n# session 준비\nSessionLocal = sessionmaker(bind=engine)",
        "detail": "Flask_liveclass.0924.action03",
        "documentation": {}
    },
    {
        "label": "INSTANCE_DIR",
        "kind": 5,
        "importPath": "Flask_liveclass.0924.action03",
        "description": "Flask_liveclass.0924.action03",
        "peekOfCode": "INSTANCE_DIR = os.path.join(BASE_DIR, \"instance\")\nos.makedirs(INSTANCE_DIR, exist_ok=True)\nDATABASE_URL = f\"sqlite:///{os.path.join(INSTANCE_DIR, \"todos.db\")}\"\nengine = create_engine(\n    DATABASE_URL,\n    echo=True\n)\n# session 준비\nSessionLocal = sessionmaker(bind=engine)\n##모델 정의##",
        "detail": "Flask_liveclass.0924.action03",
        "documentation": {}
    },
    {
        "label": "DATABASE_URL",
        "kind": 5,
        "importPath": "Flask_liveclass.0924.action03",
        "description": "Flask_liveclass.0924.action03",
        "peekOfCode": "DATABASE_URL = f\"sqlite:///{os.path.join(INSTANCE_DIR, \"todos.db\")}\"\nengine = create_engine(\n    DATABASE_URL,\n    echo=True\n)\n# session 준비\nSessionLocal = sessionmaker(bind=engine)\n##모델 정의##\nBase = declarative_base()\nclass Todo(Base):",
        "detail": "Flask_liveclass.0924.action03",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "Flask_liveclass.0924.action03",
        "description": "Flask_liveclass.0924.action03",
        "peekOfCode": "engine = create_engine(\n    DATABASE_URL,\n    echo=True\n)\n# session 준비\nSessionLocal = sessionmaker(bind=engine)\n##모델 정의##\nBase = declarative_base()\nclass Todo(Base):\n    __tablename__ = \"todos\"",
        "detail": "Flask_liveclass.0924.action03",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "kind": 5,
        "importPath": "Flask_liveclass.0924.action03",
        "description": "Flask_liveclass.0924.action03",
        "peekOfCode": "SessionLocal = sessionmaker(bind=engine)\n##모델 정의##\nBase = declarative_base()\nclass Todo(Base):\n    __tablename__ = \"todos\"\n    id = Column(Integer, primary_key = True, index = True)\n    task = Column(String, nullable = False)\n    def __repr__(self):\n        return f\"<Todo(id={self.id}, task='{self.task}`)>\"\nBase.metadata.create_all(bind=engine)",
        "detail": "Flask_liveclass.0924.action03",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "Flask_liveclass.0924.action03",
        "description": "Flask_liveclass.0924.action03",
        "peekOfCode": "Base = declarative_base()\nclass Todo(Base):\n    __tablename__ = \"todos\"\n    id = Column(Integer, primary_key = True, index = True)\n    task = Column(String, nullable = False)\n    def __repr__(self):\n        return f\"<Todo(id={self.id}, task='{self.task}`)>\"\nBase.metadata.create_all(bind=engine)\n# todos = {\n#     1: \"Velog 작성\",",
        "detail": "Flask_liveclass.0924.action03",
        "documentation": {}
    },
    {
        "label": "Todo",
        "kind": 6,
        "importPath": "Flask_liveclass.0925.action.app.models",
        "description": "Flask_liveclass.0925.action.app.models",
        "peekOfCode": "class Todo(Base):\n    __tablename__ = \"todos\"\n    id = Column(Integer, primary_key = True, index = True)\n    task = Column(String, nullable = False)\n    def __repr__(self):\n        return f\"<Todo(id={self.id}, task='{self.task}`)>\"\nBase.metadata.create_all(bind=engine)",
        "detail": "Flask_liveclass.0925.action.app.models",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "Flask_liveclass.0925.action.app.models",
        "description": "Flask_liveclass.0925.action.app.models",
        "peekOfCode": "BASE_DIR = os.path.dirname(__file__)\nINSTANCE_DIR = os.path.join(BASE_DIR, \"instance\")\nos.makedirs(INSTANCE_DIR, exist_ok=True)\nDATABASE_URL = f\"sqlite:///{os.path.join(INSTANCE_DIR, \"todos.db\")}\"\nengine = create_engine(\n    DATABASE_URL,\n    echo=True\n)\n# session 준비\nSessionLocal = sessionmaker(bind=engine)",
        "detail": "Flask_liveclass.0925.action.app.models",
        "documentation": {}
    },
    {
        "label": "INSTANCE_DIR",
        "kind": 5,
        "importPath": "Flask_liveclass.0925.action.app.models",
        "description": "Flask_liveclass.0925.action.app.models",
        "peekOfCode": "INSTANCE_DIR = os.path.join(BASE_DIR, \"instance\")\nos.makedirs(INSTANCE_DIR, exist_ok=True)\nDATABASE_URL = f\"sqlite:///{os.path.join(INSTANCE_DIR, \"todos.db\")}\"\nengine = create_engine(\n    DATABASE_URL,\n    echo=True\n)\n# session 준비\nSessionLocal = sessionmaker(bind=engine)\n##모델 정의##",
        "detail": "Flask_liveclass.0925.action.app.models",
        "documentation": {}
    },
    {
        "label": "DATABASE_URL",
        "kind": 5,
        "importPath": "Flask_liveclass.0925.action.app.models",
        "description": "Flask_liveclass.0925.action.app.models",
        "peekOfCode": "DATABASE_URL = f\"sqlite:///{os.path.join(INSTANCE_DIR, \"todos.db\")}\"\nengine = create_engine(\n    DATABASE_URL,\n    echo=True\n)\n# session 준비\nSessionLocal = sessionmaker(bind=engine)\n##모델 정의##\nBase = declarative_base()\nclass Todo(Base):",
        "detail": "Flask_liveclass.0925.action.app.models",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "Flask_liveclass.0925.action.app.models",
        "description": "Flask_liveclass.0925.action.app.models",
        "peekOfCode": "engine = create_engine(\n    DATABASE_URL,\n    echo=True\n)\n# session 준비\nSessionLocal = sessionmaker(bind=engine)\n##모델 정의##\nBase = declarative_base()\nclass Todo(Base):\n    __tablename__ = \"todos\"",
        "detail": "Flask_liveclass.0925.action.app.models",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "kind": 5,
        "importPath": "Flask_liveclass.0925.action.app.models",
        "description": "Flask_liveclass.0925.action.app.models",
        "peekOfCode": "SessionLocal = sessionmaker(bind=engine)\n##모델 정의##\nBase = declarative_base()\nclass Todo(Base):\n    __tablename__ = \"todos\"\n    id = Column(Integer, primary_key = True, index = True)\n    task = Column(String, nullable = False)\n    def __repr__(self):\n        return f\"<Todo(id={self.id}, task='{self.task}`)>\"\nBase.metadata.create_all(bind=engine)",
        "detail": "Flask_liveclass.0925.action.app.models",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "Flask_liveclass.0925.action.app.models",
        "description": "Flask_liveclass.0925.action.app.models",
        "peekOfCode": "Base = declarative_base()\nclass Todo(Base):\n    __tablename__ = \"todos\"\n    id = Column(Integer, primary_key = True, index = True)\n    task = Column(String, nullable = False)\n    def __repr__(self):\n        return f\"<Todo(id={self.id}, task='{self.task}`)>\"\nBase.metadata.create_all(bind=engine)",
        "detail": "Flask_liveclass.0925.action.app.models",
        "documentation": {}
    },
    {
        "label": "get_todos",
        "kind": 2,
        "importPath": "Flask_liveclass.0925.action.app.routes",
        "description": "Flask_liveclass.0925.action.app.routes",
        "peekOfCode": "def get_todos():\n    db = SessionLocal()\n    todos = db.query(Todo).all()\n    db.close()   # db가 항상 닫혀있어야 하기 때문에 위에서 먼저 올리는거임\n    # return jsonify(todos) 으로 처리해도 되지만 ↓이 더 이쁨\n    return jsonify([{\"id\": t.id, \"task\": t.task} for t in todos])\n#2. 특정 항목 조회: GET\n@todo_bp.route(\"/todos/<int:todo_id>\", methods=[\"GET\"])\ndef get_todo(todo_id):\n    db = SessionLocal()",
        "detail": "Flask_liveclass.0925.action.app.routes",
        "documentation": {}
    },
    {
        "label": "get_todo",
        "kind": 2,
        "importPath": "Flask_liveclass.0925.action.app.routes",
        "description": "Flask_liveclass.0925.action.app.routes",
        "peekOfCode": "def get_todo(todo_id):\n    db = SessionLocal()\n    todo = db.query(Todo).get(todo_id)\n    db.close()\n    if not todo:\n        return jsonify({\"error\": \"Todo not found\"}), 404\n    return jsonify({\"id\": todo.id, \"task\": todo.task})\n#3. 항목 추가: POST\n@todo_bp.route(\"/todos\", methods = [\"POST\"])\ndef create_todo():",
        "detail": "Flask_liveclass.0925.action.app.routes",
        "documentation": {}
    },
    {
        "label": "create_todo",
        "kind": 2,
        "importPath": "Flask_liveclass.0925.action.app.routes",
        "description": "Flask_liveclass.0925.action.app.routes",
        "peekOfCode": "def create_todo():\n    data = request.get_json()\n    db = SessionLocal()\n    # 데이터 삽입\n    new_todo = Todo(task=data[\"task\"])\n    db.add(new_todo)\n    db.commit()\n    db.refresh(new_todo)  #commit 이후로 자동 생성된 id 불러오기\n    db.close()\n    return jsonify({\"id\": new_todo.id, \"task\": new_todo.task}), 201",
        "detail": "Flask_liveclass.0925.action.app.routes",
        "documentation": {}
    },
    {
        "label": "update_todo",
        "kind": 2,
        "importPath": "Flask_liveclass.0925.action.app.routes",
        "description": "Flask_liveclass.0925.action.app.routes",
        "peekOfCode": "def update_todo(todo_id):\n    data = request.get_json()\n    db = SessionLocal()\n    # db에서 항목 찾기\n    todo = db.query(Todo).get(todo_id)\n    if not todo: #못 찾으면? 404 반환\n        db.close()\n        return jsonify({\"error\": \"Todo not found\"}), 404\n    # 있으면 이렇게, 데이터가 있으니 업데이트\n    todo.task = data[\"task\"]",
        "detail": "Flask_liveclass.0925.action.app.routes",
        "documentation": {}
    },
    {
        "label": "delete_todo",
        "kind": 2,
        "importPath": "Flask_liveclass.0925.action.app.routes",
        "description": "Flask_liveclass.0925.action.app.routes",
        "peekOfCode": "def delete_todo(todo_id):\n    db = SessionLocal()\n    # db에서 항목 찾기\n    todo = db.query(Todo).get(todo_id)\n    if not todo: # 데이터 없을 시 바로 db close\n        db.close()\n        return jsonify({\"error\": \"Todo not found\"}, 404)\n    # 데이터 삭제\n    db.delete(todo)\n    db.commit()",
        "detail": "Flask_liveclass.0925.action.app.routes",
        "documentation": {}
    },
    {
        "label": "todo_bp",
        "kind": 5,
        "importPath": "Flask_liveclass.0925.action.app.routes",
        "description": "Flask_liveclass.0925.action.app.routes",
        "peekOfCode": "todo_bp = Blueprint(\"todo\", __name__)\nuser_bp = Blueprint(\"user\", __name__)\n# blueprint에 라우트 등록\n# 1. 전체 목록 조회(GET)\n@todo_bp.route(\"/todos\", methods = [\"GET\"])\ndef get_todos():\n    db = SessionLocal()\n    todos = db.query(Todo).all()\n    db.close()   # db가 항상 닫혀있어야 하기 때문에 위에서 먼저 올리는거임\n    # return jsonify(todos) 으로 처리해도 되지만 ↓이 더 이쁨",
        "detail": "Flask_liveclass.0925.action.app.routes",
        "documentation": {}
    },
    {
        "label": "user_bp",
        "kind": 5,
        "importPath": "Flask_liveclass.0925.action.app.routes",
        "description": "Flask_liveclass.0925.action.app.routes",
        "peekOfCode": "user_bp = Blueprint(\"user\", __name__)\n# blueprint에 라우트 등록\n# 1. 전체 목록 조회(GET)\n@todo_bp.route(\"/todos\", methods = [\"GET\"])\ndef get_todos():\n    db = SessionLocal()\n    todos = db.query(Todo).all()\n    db.close()   # db가 항상 닫혀있어야 하기 때문에 위에서 먼저 올리는거임\n    # return jsonify(todos) 으로 처리해도 되지만 ↓이 더 이쁨\n    return jsonify([{\"id\": t.id, \"task\": t.task} for t in todos])",
        "detail": "Flask_liveclass.0925.action.app.routes",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "Flask_liveclass.0925.action.app",
        "description": "Flask_liveclass.0925.action.app",
        "peekOfCode": "app = create_app()\nif __name__ == '__main__':\n    app.run(debug=True)\n# todos = {\n#     1: \"Velog 작성\",\n#     2: \"수준별학습 과제\",\n#     3: \"Flask 수업 & 노션 과제 제출\",\n#     4: \"운동가기\"\n# }",
        "detail": "Flask_liveclass.0925.action.app",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "Flask_liveclass.0925.action02.main",
        "description": "Flask_liveclass.0925.action02.main",
        "peekOfCode": "def index():\n    return render_template(\"chat.html\")\n@sock.route('/ws')\ndef websocket(ws):\n    # 켜져 있는 동안 계속 돌아가기 때문에, while로 계속 켜 줌\n    clients.add(ws)\n    try:\n        while True:\n            data = ws.receive()  #클라이언트에서 메세지 받기\n            if data is None:  #연결 끊기용",
        "detail": "Flask_liveclass.0925.action02.main",
        "documentation": {}
    },
    {
        "label": "websocket",
        "kind": 2,
        "importPath": "Flask_liveclass.0925.action02.main",
        "description": "Flask_liveclass.0925.action02.main",
        "peekOfCode": "def websocket(ws):\n    # 켜져 있는 동안 계속 돌아가기 때문에, while로 계속 켜 줌\n    clients.add(ws)\n    try:\n        while True:\n            data = ws.receive()  #클라이언트에서 메세지 받기\n            if data is None:  #연결 끊기용\n                break\n            # 모든 클라이언트에게 메세지 전송\n            for client in clients:",
        "detail": "Flask_liveclass.0925.action02.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "Flask_liveclass.0925.action02.main",
        "description": "Flask_liveclass.0925.action02.main",
        "peekOfCode": "app = Flask(__name__)\nsock = Sock(app)\n# 클라이언트 추가\nclients = set() # 연결된 클라이언트 보관\n@app.route(\"/\")\ndef index():\n    return render_template(\"chat.html\")\n@sock.route('/ws')\ndef websocket(ws):\n    # 켜져 있는 동안 계속 돌아가기 때문에, while로 계속 켜 줌",
        "detail": "Flask_liveclass.0925.action02.main",
        "documentation": {}
    },
    {
        "label": "sock",
        "kind": 5,
        "importPath": "Flask_liveclass.0925.action02.main",
        "description": "Flask_liveclass.0925.action02.main",
        "peekOfCode": "sock = Sock(app)\n# 클라이언트 추가\nclients = set() # 연결된 클라이언트 보관\n@app.route(\"/\")\ndef index():\n    return render_template(\"chat.html\")\n@sock.route('/ws')\ndef websocket(ws):\n    # 켜져 있는 동안 계속 돌아가기 때문에, while로 계속 켜 줌\n    clients.add(ws)",
        "detail": "Flask_liveclass.0925.action02.main",
        "documentation": {}
    },
    {
        "label": "clients",
        "kind": 5,
        "importPath": "Flask_liveclass.0925.action02.main",
        "description": "Flask_liveclass.0925.action02.main",
        "peekOfCode": "clients = set() # 연결된 클라이언트 보관\n@app.route(\"/\")\ndef index():\n    return render_template(\"chat.html\")\n@sock.route('/ws')\ndef websocket(ws):\n    # 켜져 있는 동안 계속 돌아가기 때문에, while로 계속 켜 줌\n    clients.add(ws)\n    try:\n        while True:",
        "detail": "Flask_liveclass.0925.action02.main",
        "documentation": {}
    },
    {
        "label": "websocket",
        "kind": 2,
        "importPath": "Flask_liveclass.0925.action03.main",
        "description": "Flask_liveclass.0925.action03.main",
        "peekOfCode": "def websocket(ws):\n    connections.append(ws)\n    while True:\n        data = ws.receive()\n        if data is None:\n            break\n        connections.remove(ws)\ndef background_jobs():\n    while True:\n        time.sleep(5)",
        "detail": "Flask_liveclass.0925.action03.main",
        "documentation": {}
    },
    {
        "label": "background_jobs",
        "kind": 2,
        "importPath": "Flask_liveclass.0925.action03.main",
        "description": "Flask_liveclass.0925.action03.main",
        "peekOfCode": "def background_jobs():\n    while True:\n        time.sleep(5)\n        for ws in connections:\n            try:\n                ws.send(\"서버에서 메세지를 보내고 있습니다.\")\n            except Exception:\n                pass\n# 쓰레드 세팅\nthreading.Thread(target=background_jobs, daemon=True).start()",
        "detail": "Flask_liveclass.0925.action03.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "Flask_liveclass.0925.action03.main",
        "description": "Flask_liveclass.0925.action03.main",
        "peekOfCode": "app = Flask(__name__)\nsock = Sock(app)\n# 연결된 클라이언트 보관소\nconnections = []\n@sock.route('/ws')\ndef websocket(ws):\n    connections.append(ws)\n    while True:\n        data = ws.receive()\n        if data is None:",
        "detail": "Flask_liveclass.0925.action03.main",
        "documentation": {}
    },
    {
        "label": "sock",
        "kind": 5,
        "importPath": "Flask_liveclass.0925.action03.main",
        "description": "Flask_liveclass.0925.action03.main",
        "peekOfCode": "sock = Sock(app)\n# 연결된 클라이언트 보관소\nconnections = []\n@sock.route('/ws')\ndef websocket(ws):\n    connections.append(ws)\n    while True:\n        data = ws.receive()\n        if data is None:\n            break",
        "detail": "Flask_liveclass.0925.action03.main",
        "documentation": {}
    },
    {
        "label": "connections",
        "kind": 5,
        "importPath": "Flask_liveclass.0925.action03.main",
        "description": "Flask_liveclass.0925.action03.main",
        "peekOfCode": "connections = []\n@sock.route('/ws')\ndef websocket(ws):\n    connections.append(ws)\n    while True:\n        data = ws.receive()\n        if data is None:\n            break\n        connections.remove(ws)\ndef background_jobs():",
        "detail": "Flask_liveclass.0925.action03.main",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "Flask_liveclass.0925.action04.main",
        "description": "Flask_liveclass.0925.action04.main",
        "peekOfCode": "def index():\n    return render_template(\"typing.html\")\n@sock.route(\"/ws\")\ndef websocket(ws):\n    # typing... / 메세지 안 나오게 처리\n    while True:\n        data = ws.receive()\n        if data == \"typing\":\n            ws.send(\"typing...\")\n        elif data == \"stop\":",
        "detail": "Flask_liveclass.0925.action04.main",
        "documentation": {}
    },
    {
        "label": "websocket",
        "kind": 2,
        "importPath": "Flask_liveclass.0925.action04.main",
        "description": "Flask_liveclass.0925.action04.main",
        "peekOfCode": "def websocket(ws):\n    # typing... / 메세지 안 나오게 처리\n    while True:\n        data = ws.receive()\n        if data == \"typing\":\n            ws.send(\"typing...\")\n        elif data == \"stop\":\n            ws.send(\"\")\n        if data is None: # 연결 종료\n            break",
        "detail": "Flask_liveclass.0925.action04.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "Flask_liveclass.0925.action04.main",
        "description": "Flask_liveclass.0925.action04.main",
        "peekOfCode": "app = Flask(__name__)\nsock = Sock(app)\n@app.route(\"/\")\ndef index():\n    return render_template(\"typing.html\")\n@sock.route(\"/ws\")\ndef websocket(ws):\n    # typing... / 메세지 안 나오게 처리\n    while True:\n        data = ws.receive()",
        "detail": "Flask_liveclass.0925.action04.main",
        "documentation": {}
    },
    {
        "label": "sock",
        "kind": 5,
        "importPath": "Flask_liveclass.0925.action04.main",
        "description": "Flask_liveclass.0925.action04.main",
        "peekOfCode": "sock = Sock(app)\n@app.route(\"/\")\ndef index():\n    return render_template(\"typing.html\")\n@sock.route(\"/ws\")\ndef websocket(ws):\n    # typing... / 메세지 안 나오게 처리\n    while True:\n        data = ws.receive()\n        if data == \"typing\":",
        "detail": "Flask_liveclass.0925.action04.main",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "Flask_liveclass.0925.action05.main",
        "description": "Flask_liveclass.0925.action05.main",
        "peekOfCode": "def index():\n    return render_template(\"sentiment.html\")\n@sock.route(\"/ws\")\ndef websocket(ws):\n    while True:\n        data = ws.receive()\n        if data is None:\n            break\n        #감정 분석\n        pos = [\"love\",\"행복\"] # 긍정적",
        "detail": "Flask_liveclass.0925.action05.main",
        "documentation": {}
    },
    {
        "label": "websocket",
        "kind": 2,
        "importPath": "Flask_liveclass.0925.action05.main",
        "description": "Flask_liveclass.0925.action05.main",
        "peekOfCode": "def websocket(ws):\n    while True:\n        data = ws.receive()\n        if data is None:\n            break\n        #감정 분석\n        pos = [\"love\",\"행복\"] # 긍정적\n        neg = [\"sad\", \"angry\", \"슬픔\"] # 부정적\n        # for word in pos: 특정 그룹에서 특정 단어 찾기\n        # word in data : 입력한 데이터에서 특정 단어가 있는지 확인",
        "detail": "Flask_liveclass.0925.action05.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "Flask_liveclass.0925.action05.main",
        "description": "Flask_liveclass.0925.action05.main",
        "peekOfCode": "app = Flask(__name__)\nsock = Sock(app)\n@app.route(\"/\")\ndef index():\n    return render_template(\"sentiment.html\")\n@sock.route(\"/ws\")\ndef websocket(ws):\n    while True:\n        data = ws.receive()\n        if data is None:",
        "detail": "Flask_liveclass.0925.action05.main",
        "documentation": {}
    },
    {
        "label": "sock",
        "kind": 5,
        "importPath": "Flask_liveclass.0925.action05.main",
        "description": "Flask_liveclass.0925.action05.main",
        "peekOfCode": "sock = Sock(app)\n@app.route(\"/\")\ndef index():\n    return render_template(\"sentiment.html\")\n@sock.route(\"/ws\")\ndef websocket(ws):\n    while True:\n        data = ws.receive()\n        if data is None:\n            break",
        "detail": "Flask_liveclass.0925.action05.main",
        "documentation": {}
    },
    {
        "label": "websocket",
        "kind": 2,
        "importPath": "Flask_liveclass.0925.action06.main",
        "description": "Flask_liveclass.0925.action06.main",
        "peekOfCode": "def websocket(ws):\n    while True:\n        url = \"https://api.binance.com/api/v3/ticker/price?symbol=BTCUSDT\"\n        result = requests.get(url).json() # {\"symbol\":\"BTCUSDT\", \"price\":\"얼마얼마\"}\n        price = result[\"price\"]\n        price_out = round(float(price), 2)  # 디버그이슈: price가 str로 들어왔기에 float 형태로 바꿔줘야했음\n        ws.send(f\"BTC 가격: {price_out}\")\n        time.sleep(2)\n@app.route(\"/\")\ndef index():",
        "detail": "Flask_liveclass.0925.action06.main",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "Flask_liveclass.0925.action06.main",
        "description": "Flask_liveclass.0925.action06.main",
        "peekOfCode": "def index():\n    return render_template(\"btc.html\")\nif __name__ == '__main__':\n    app.run(debug=True)\n    #됩니다",
        "detail": "Flask_liveclass.0925.action06.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "Flask_liveclass.0925.action06.main",
        "description": "Flask_liveclass.0925.action06.main",
        "peekOfCode": "app = Flask(__name__)\nsock = Sock(app)\n@sock.route(\"/ws\")\ndef websocket(ws):\n    while True:\n        url = \"https://api.binance.com/api/v3/ticker/price?symbol=BTCUSDT\"\n        result = requests.get(url).json() # {\"symbol\":\"BTCUSDT\", \"price\":\"얼마얼마\"}\n        price = result[\"price\"]\n        price_out = round(float(price), 2)  # 디버그이슈: price가 str로 들어왔기에 float 형태로 바꿔줘야했음\n        ws.send(f\"BTC 가격: {price_out}\")",
        "detail": "Flask_liveclass.0925.action06.main",
        "documentation": {}
    },
    {
        "label": "sock",
        "kind": 5,
        "importPath": "Flask_liveclass.0925.action06.main",
        "description": "Flask_liveclass.0925.action06.main",
        "peekOfCode": "sock = Sock(app)\n@sock.route(\"/ws\")\ndef websocket(ws):\n    while True:\n        url = \"https://api.binance.com/api/v3/ticker/price?symbol=BTCUSDT\"\n        result = requests.get(url).json() # {\"symbol\":\"BTCUSDT\", \"price\":\"얼마얼마\"}\n        price = result[\"price\"]\n        price_out = round(float(price), 2)  # 디버그이슈: price가 str로 들어왔기에 float 형태로 바꿔줘야했음\n        ws.send(f\"BTC 가격: {price_out}\")\n        time.sleep(2)",
        "detail": "Flask_liveclass.0925.action06.main",
        "documentation": {}
    },
    {
        "label": "home",
        "kind": 2,
        "importPath": "Flask_liveclass.route.app.",
        "description": "Flask_liveclass.route.app.",
        "peekOfCode": "def home():\n    return \"Hello, This is Main Page!\"\n@app.route('/about')\ndef about():\n    return \"about page\"\n@app.route('/user/<username>')\n#동적으로 url 파라미터 값을 받아서 처리해 줌\ndef show_user_profile(username):\n    return f'UserName: {username}'\n@app.route('/test')",
        "detail": "Flask_liveclass.route.app.",
        "documentation": {}
    },
    {
        "label": "about",
        "kind": 2,
        "importPath": "Flask_liveclass.route.app.",
        "description": "Flask_liveclass.route.app.",
        "peekOfCode": "def about():\n    return \"about page\"\n@app.route('/user/<username>')\n#동적으로 url 파라미터 값을 받아서 처리해 줌\ndef show_user_profile(username):\n    return f'UserName: {username}'\n@app.route('/test')\ndef test():\n    url = 'http://127.0.0.1:5000/submit'\n    data = 'test data'",
        "detail": "Flask_liveclass.route.app.",
        "documentation": {}
    },
    {
        "label": "show_user_profile",
        "kind": 2,
        "importPath": "Flask_liveclass.route.app.",
        "description": "Flask_liveclass.route.app.",
        "peekOfCode": "def show_user_profile(username):\n    return f'UserName: {username}'\n@app.route('/test')\ndef test():\n    url = 'http://127.0.0.1:5000/submit'\n    data = 'test data'\n    request.post(url=url, data = data)\n    return response\n@app.route('/submit', methods = ['GET', 'POST', 'PUT', 'DELETE'])\ndef submit():",
        "detail": "Flask_liveclass.route.app.",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "Flask_liveclass.route.app.",
        "description": "Flask_liveclass.route.app.",
        "peekOfCode": "def test():\n    url = 'http://127.0.0.1:5000/submit'\n    data = 'test data'\n    request.post(url=url, data = data)\n    return response\n@app.route('/submit', methods = ['GET', 'POST', 'PUT', 'DELETE'])\ndef submit():\n    print(request.method)\n    if request.method == 'GET':\n        print(\"GET method\")",
        "detail": "Flask_liveclass.route.app.",
        "documentation": {}
    },
    {
        "label": "submit",
        "kind": 2,
        "importPath": "Flask_liveclass.route.app.",
        "description": "Flask_liveclass.route.app.",
        "peekOfCode": "def submit():\n    print(request.method)\n    if request.method == 'GET':\n        print(\"GET method\")\n    if request.method == \"POST\":\n        print(\"**POST method**\", request.data)\n    return \"success\"\n@app.route('/')\ndef index():\n    data = {",
        "detail": "Flask_liveclass.route.app.",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "Flask_liveclass.route.app.",
        "description": "Flask_liveclass.route.app.",
        "peekOfCode": "def index():\n    data = {\n        'title' : 'Flask Jinja Template',\n        'user' : 'drewdrew',\n        'is_admin': True,\n        'items': ['Item1','Item2','Item3']\n    }\n    return render_template()\nif __name__ == \"__main__\":\n    app.run()",
        "detail": "Flask_liveclass.route.app.",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "Flask_liveclass.route.app.",
        "description": "Flask_liveclass.route.app.",
        "peekOfCode": "app = Flask(__name__)\n@app.route('/')\ndef home():\n    return \"Hello, This is Main Page!\"\n@app.route('/about')\ndef about():\n    return \"about page\"\n@app.route('/user/<username>')\n#동적으로 url 파라미터 값을 받아서 처리해 줌\ndef show_user_profile(username):",
        "detail": "Flask_liveclass.route.app.",
        "documentation": {}
    },
    {
        "label": "hello_world",
        "kind": 2,
        "importPath": "Flask_liveclass.main",
        "description": "Flask_liveclass.main",
        "peekOfCode": "def hello_world():\n    return \"Hello, Flask!\"\n@app.route(\"/user/<name>\")\ndef greet(name):\n    return f\"{name}님, 환영합니다.\"\n@app.route(\"/hello\")\ndef hello():\n    return render_template(\"hello.html\", name = \"OZ\")\n@app.route(\"/user/<username>\")\ndef user(username):",
        "detail": "Flask_liveclass.main",
        "documentation": {}
    },
    {
        "label": "greet",
        "kind": 2,
        "importPath": "Flask_liveclass.main",
        "description": "Flask_liveclass.main",
        "peekOfCode": "def greet(name):\n    return f\"{name}님, 환영합니다.\"\n@app.route(\"/hello\")\ndef hello():\n    return render_template(\"hello.html\", name = \"OZ\")\n@app.route(\"/user/<username>\")\ndef user(username):\n    return render_template(\"hello.html\", username=username)\n@app.route()\ndef fruits():",
        "detail": "Flask_liveclass.main",
        "documentation": {}
    },
    {
        "label": "hello",
        "kind": 2,
        "importPath": "Flask_liveclass.main",
        "description": "Flask_liveclass.main",
        "peekOfCode": "def hello():\n    return render_template(\"hello.html\", name = \"OZ\")\n@app.route(\"/user/<username>\")\ndef user(username):\n    return render_template(\"hello.html\", username=username)\n@app.route()\ndef fruits():\n    fruits = [\"사과\",\"바나나\",\"딸기\",\"포도\"]\n    return render_template(\"fruits.html\", fruits=fruits)\n@app.route(\"/\")",
        "detail": "Flask_liveclass.main",
        "documentation": {}
    },
    {
        "label": "user",
        "kind": 2,
        "importPath": "Flask_liveclass.main",
        "description": "Flask_liveclass.main",
        "peekOfCode": "def user(username):\n    return render_template(\"hello.html\", username=username)\n@app.route()\ndef fruits():\n    fruits = [\"사과\",\"바나나\",\"딸기\",\"포도\"]\n    return render_template(\"fruits.html\", fruits=fruits)\n@app.route(\"/\")\ndef index():\n    return render_template('Index Page')\n@app.route(\"/hellobuddy\")",
        "detail": "Flask_liveclass.main",
        "documentation": {}
    },
    {
        "label": "fruits",
        "kind": 2,
        "importPath": "Flask_liveclass.main",
        "description": "Flask_liveclass.main",
        "peekOfCode": "def fruits():\n    fruits = [\"사과\",\"바나나\",\"딸기\",\"포도\"]\n    return render_template(\"fruits.html\", fruits=fruits)\n@app.route(\"/\")\ndef index():\n    return render_template('Index Page')\n@app.route(\"/hellobuddy\")\ndef hellobuddy():\n    name = request.args.get(\"name\",\"Flask\")\n    return render_template(\"hellobuddy.html\", name=name)",
        "detail": "Flask_liveclass.main",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "Flask_liveclass.main",
        "description": "Flask_liveclass.main",
        "peekOfCode": "def index():\n    return render_template('Index Page')\n@app.route(\"/hellobuddy\")\ndef hellobuddy():\n    name = request.args.get(\"name\",\"Flask\")\n    return render_template(\"hellobuddy.html\", name=name)\nif __name__ == \"__main__\":\n    app.run(debug=True, port=5023)",
        "detail": "Flask_liveclass.main",
        "documentation": {}
    },
    {
        "label": "hellobuddy",
        "kind": 2,
        "importPath": "Flask_liveclass.main",
        "description": "Flask_liveclass.main",
        "peekOfCode": "def hellobuddy():\n    name = request.args.get(\"name\",\"Flask\")\n    return render_template(\"hellobuddy.html\", name=name)\nif __name__ == \"__main__\":\n    app.run(debug=True, port=5023)",
        "detail": "Flask_liveclass.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "Flask_liveclass.main",
        "description": "Flask_liveclass.main",
        "peekOfCode": "app = Flask(__name__)\n@app.route(\"/\")\ndef hello_world():\n    return \"Hello, Flask!\"\n@app.route(\"/user/<name>\")\ndef greet(name):\n    return f\"{name}님, 환영합니다.\"\n@app.route(\"/hello\")\ndef hello():\n    return render_template(\"hello.html\", name = \"OZ\")",
        "detail": "Flask_liveclass.main",
        "documentation": {}
    },
    {
        "label": "example",
        "kind": 2,
        "importPath": "week6_RC.action03.abort_test",
        "description": "week6_RC.action03.abort_test",
        "peekOfCode": "def example():\n    #어떠한 조건에서 오류를 발생시키고 처리\n    error_condition = True\n    if error_condition:\n        abort(500, description = \"An error occurred while processing the request.\")\n    return \"Success!\" #정상적인 답변ㅇ\nif __name__ == \"__main__\":\n    app.run(debug=True)",
        "detail": "week6_RC.action03.abort_test",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "week6_RC.action03.abort_test",
        "description": "week6_RC.action03.abort_test",
        "peekOfCode": "app = Flask(__name__)\n@app.route('/example')\ndef example():\n    #어떠한 조건에서 오류를 발생시키고 처리\n    error_condition = True\n    if error_condition:\n        abort(500, description = \"An error occurred while processing the request.\")\n    return \"Success!\" #정상적인 답변ㅇ\nif __name__ == \"__main__\":\n    app.run(debug=True)",
        "detail": "week6_RC.action03.abort_test",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "week6_RC.action03.action03",
        "description": "week6_RC.action03.action03",
        "peekOfCode": "app = Flask(__name__)\n# OpenAPI 관련 설정\napp.config[\"API_TITLE\"] = \"My API\"\napp.config[\"API_VERSION\"] = \"v1\"\napp.config[\"OPENAPI_VERSION\"] = \"3.1.3\"\napp.config[\"OPENAPI_URL_PREFIX\"] = \"/\"\napp.config[\"OPENAPI_SWAGGER_UI_PATH\"] = \"/swagger-ui\"\napp.config[\"OPENAPI_SWAGGER_UI_URL\"] = \"https://cdn.jsdelivr.net/npm/swagger-ui-dist/\"\napi = Api(app)\napi.register_blueprint(blp)",
        "detail": "week6_RC.action03.action03",
        "documentation": {}
    },
    {
        "label": "app.config[\"API_TITLE\"]",
        "kind": 5,
        "importPath": "week6_RC.action03.action03",
        "description": "week6_RC.action03.action03",
        "peekOfCode": "app.config[\"API_TITLE\"] = \"My API\"\napp.config[\"API_VERSION\"] = \"v1\"\napp.config[\"OPENAPI_VERSION\"] = \"3.1.3\"\napp.config[\"OPENAPI_URL_PREFIX\"] = \"/\"\napp.config[\"OPENAPI_SWAGGER_UI_PATH\"] = \"/swagger-ui\"\napp.config[\"OPENAPI_SWAGGER_UI_URL\"] = \"https://cdn.jsdelivr.net/npm/swagger-ui-dist/\"\napi = Api(app)\napi.register_blueprint(blp)\nif __name__ == \"__main__\":\n    app.run(debug=True)",
        "detail": "week6_RC.action03.action03",
        "documentation": {}
    },
    {
        "label": "app.config[\"API_VERSION\"]",
        "kind": 5,
        "importPath": "week6_RC.action03.action03",
        "description": "week6_RC.action03.action03",
        "peekOfCode": "app.config[\"API_VERSION\"] = \"v1\"\napp.config[\"OPENAPI_VERSION\"] = \"3.1.3\"\napp.config[\"OPENAPI_URL_PREFIX\"] = \"/\"\napp.config[\"OPENAPI_SWAGGER_UI_PATH\"] = \"/swagger-ui\"\napp.config[\"OPENAPI_SWAGGER_UI_URL\"] = \"https://cdn.jsdelivr.net/npm/swagger-ui-dist/\"\napi = Api(app)\napi.register_blueprint(blp)\nif __name__ == \"__main__\":\n    app.run(debug=True)",
        "detail": "week6_RC.action03.action03",
        "documentation": {}
    },
    {
        "label": "app.config[\"OPENAPI_VERSION\"]",
        "kind": 5,
        "importPath": "week6_RC.action03.action03",
        "description": "week6_RC.action03.action03",
        "peekOfCode": "app.config[\"OPENAPI_VERSION\"] = \"3.1.3\"\napp.config[\"OPENAPI_URL_PREFIX\"] = \"/\"\napp.config[\"OPENAPI_SWAGGER_UI_PATH\"] = \"/swagger-ui\"\napp.config[\"OPENAPI_SWAGGER_UI_URL\"] = \"https://cdn.jsdelivr.net/npm/swagger-ui-dist/\"\napi = Api(app)\napi.register_blueprint(blp)\nif __name__ == \"__main__\":\n    app.run(debug=True)",
        "detail": "week6_RC.action03.action03",
        "documentation": {}
    },
    {
        "label": "app.config[\"OPENAPI_URL_PREFIX\"]",
        "kind": 5,
        "importPath": "week6_RC.action03.action03",
        "description": "week6_RC.action03.action03",
        "peekOfCode": "app.config[\"OPENAPI_URL_PREFIX\"] = \"/\"\napp.config[\"OPENAPI_SWAGGER_UI_PATH\"] = \"/swagger-ui\"\napp.config[\"OPENAPI_SWAGGER_UI_URL\"] = \"https://cdn.jsdelivr.net/npm/swagger-ui-dist/\"\napi = Api(app)\napi.register_blueprint(blp)\nif __name__ == \"__main__\":\n    app.run(debug=True)",
        "detail": "week6_RC.action03.action03",
        "documentation": {}
    },
    {
        "label": "app.config[\"OPENAPI_SWAGGER_UI_PATH\"]",
        "kind": 5,
        "importPath": "week6_RC.action03.action03",
        "description": "week6_RC.action03.action03",
        "peekOfCode": "app.config[\"OPENAPI_SWAGGER_UI_PATH\"] = \"/swagger-ui\"\napp.config[\"OPENAPI_SWAGGER_UI_URL\"] = \"https://cdn.jsdelivr.net/npm/swagger-ui-dist/\"\napi = Api(app)\napi.register_blueprint(blp)\nif __name__ == \"__main__\":\n    app.run(debug=True)",
        "detail": "week6_RC.action03.action03",
        "documentation": {}
    },
    {
        "label": "app.config[\"OPENAPI_SWAGGER_UI_URL\"]",
        "kind": 5,
        "importPath": "week6_RC.action03.action03",
        "description": "week6_RC.action03.action03",
        "peekOfCode": "app.config[\"OPENAPI_SWAGGER_UI_URL\"] = \"https://cdn.jsdelivr.net/npm/swagger-ui-dist/\"\napi = Api(app)\napi.register_blueprint(blp)\nif __name__ == \"__main__\":\n    app.run(debug=True)",
        "detail": "week6_RC.action03.action03",
        "documentation": {}
    },
    {
        "label": "api",
        "kind": 5,
        "importPath": "week6_RC.action03.action03",
        "description": "week6_RC.action03.action03",
        "peekOfCode": "api = Api(app)\napi.register_blueprint(blp)\nif __name__ == \"__main__\":\n    app.run(debug=True)",
        "detail": "week6_RC.action03.action03",
        "documentation": {}
    },
    {
        "label": "ItemList",
        "kind": 6,
        "importPath": "week6_RC.action03.api",
        "description": "week6_RC.action03.api",
        "peekOfCode": "class ItemList(MethodView):\n    @blp.response(200)\n    def get(self):\n        # 모든 아이템을 반환하는 GET 요청 처리\n        return items\n    @blp.arguments(ItemSchema)\n    @blp.response(201, description=\"Item added\")\n    def post(self, new_data):\n        # 새 아이템을 추가하는 POST 요청 처리\n        items.append(new_data)",
        "detail": "week6_RC.action03.api",
        "documentation": {}
    },
    {
        "label": "Item",
        "kind": 6,
        "importPath": "week6_RC.action03.api",
        "description": "week6_RC.action03.api",
        "peekOfCode": "class Item(MethodView):\n    @blp.response(200)\n    def get(self, item_id):\n        # 특정 ID를 가진 아이템을 반환하는 GET 요청 처리\n\t\t\t\t# next() => 반복문에서 값이 있으면 값을 반환하고 없으면 None을 반환\n\t\t\t\t# next는 조건을 만족하는 첫 번째 아이템을 반환하고, 그 이후의 아이템은 무시합니다.\n        item = next((item for item in items if item[\"id\"] == item_id), None)\n        if item is None:\n            abort(404, message=\"Item not found\")\n        return item",
        "detail": "week6_RC.action03.api",
        "documentation": {}
    },
    {
        "label": "blp",
        "kind": 5,
        "importPath": "week6_RC.action03.api",
        "description": "week6_RC.action03.api",
        "peekOfCode": "blp = Blueprint(\"items\", \"items\", url_prefix=\"/items\", description=\"Operations on items\")\n# 간단한 데이터 저장소 역할을 하는 리스트\nitems = []\n# 'ItemList' 클래스 - GET 및 POST 요청을 처리\n@blp.route(\"/\")\nclass ItemList(MethodView):\n    @blp.response(200)\n    def get(self):\n        # 모든 아이템을 반환하는 GET 요청 처리\n        return items",
        "detail": "week6_RC.action03.api",
        "documentation": {}
    },
    {
        "label": "items",
        "kind": 5,
        "importPath": "week6_RC.action03.api",
        "description": "week6_RC.action03.api",
        "peekOfCode": "items = []\n# 'ItemList' 클래스 - GET 및 POST 요청을 처리\n@blp.route(\"/\")\nclass ItemList(MethodView):\n    @blp.response(200)\n    def get(self):\n        # 모든 아이템을 반환하는 GET 요청 처리\n        return items\n    @blp.arguments(ItemSchema)\n    @blp.response(201, description=\"Item added\")",
        "detail": "week6_RC.action03.api",
        "documentation": {}
    },
    {
        "label": "hello",
        "kind": 2,
        "importPath": "week6_RC.action03.app",
        "description": "week6_RC.action03.app",
        "peekOfCode": "def hello():\n    return \"Hello from my blueprint!\"\n@my_blueprint.route('/greet/<name>')\ndef greet(name):\n    return f\"Hello, {name}!\"\n# 두 번째 블루프린트\nanother_blueprint = Blueprint('another_blueprint', __name__, url_prefix='/another')\n# /another/world\n@another_blueprint.route('/world')\ndef world():",
        "detail": "week6_RC.action03.app",
        "documentation": {}
    },
    {
        "label": "greet",
        "kind": 2,
        "importPath": "week6_RC.action03.app",
        "description": "week6_RC.action03.app",
        "peekOfCode": "def greet(name):\n    return f\"Hello, {name}!\"\n# 두 번째 블루프린트\nanother_blueprint = Blueprint('another_blueprint', __name__, url_prefix='/another')\n# /another/world\n@another_blueprint.route('/world')\ndef world():\n    return \"Hello, world, from another blueprint!\"\n# /another/echo\n@another_blueprint.route('/echo', methods=['POST'])",
        "detail": "week6_RC.action03.app",
        "documentation": {}
    },
    {
        "label": "world",
        "kind": 2,
        "importPath": "week6_RC.action03.app",
        "description": "week6_RC.action03.app",
        "peekOfCode": "def world():\n    return \"Hello, world, from another blueprint!\"\n# /another/echo\n@another_blueprint.route('/echo', methods=['POST'])\ndef echo():\n    data = request.json\n    return f\"Received: {data}\"\n# 블루프린트에 템플릿을 사용하는 예제\n@another_blueprint.route('/template')\ndef using_template():",
        "detail": "week6_RC.action03.app",
        "documentation": {}
    },
    {
        "label": "echo",
        "kind": 2,
        "importPath": "week6_RC.action03.app",
        "description": "week6_RC.action03.app",
        "peekOfCode": "def echo():\n    data = request.json\n    return f\"Received: {data}\"\n# 블루프린트에 템플릿을 사용하는 예제\n@another_blueprint.route('/template')\ndef using_template():\n    return render_template('example.html')\n# 세 번째 블루프린트\nthird_blueprint = Blueprint('third_blueprint', __name__, url_prefix='/third')\n@third_blueprint.route('/bye')",
        "detail": "week6_RC.action03.app",
        "documentation": {}
    },
    {
        "label": "using_template",
        "kind": 2,
        "importPath": "week6_RC.action03.app",
        "description": "week6_RC.action03.app",
        "peekOfCode": "def using_template():\n    return render_template('example.html')\n# 세 번째 블루프린트\nthird_blueprint = Blueprint('third_blueprint', __name__, url_prefix='/third')\n@third_blueprint.route('/bye')\ndef goodbye():\n    return \"Goodbye from the third blueprint!\"\n# 애플리케이션에 블루프린트 등록\napp.register_blueprint(my_blueprint)\napp.register_blueprint(another_blueprint)",
        "detail": "week6_RC.action03.app",
        "documentation": {}
    },
    {
        "label": "goodbye",
        "kind": 2,
        "importPath": "week6_RC.action03.app",
        "description": "week6_RC.action03.app",
        "peekOfCode": "def goodbye():\n    return \"Goodbye from the third blueprint!\"\n# 애플리케이션에 블루프린트 등록\napp.register_blueprint(my_blueprint)\napp.register_blueprint(another_blueprint)\napp.register_blueprint(third_blueprint)\nif __name__ == \"__main__\":\n    app.run(debug=True)",
        "detail": "week6_RC.action03.app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "week6_RC.action03.app",
        "description": "week6_RC.action03.app",
        "peekOfCode": "app = Flask(__name__)\n# 첫 번째 블루프린트\nmy_blueprint = Blueprint('my_blueprint', __name__)\n@my_blueprint.route('/hello')\ndef hello():\n    return \"Hello from my blueprint!\"\n@my_blueprint.route('/greet/<name>')\ndef greet(name):\n    return f\"Hello, {name}!\"\n# 두 번째 블루프린트",
        "detail": "week6_RC.action03.app",
        "documentation": {}
    },
    {
        "label": "my_blueprint",
        "kind": 5,
        "importPath": "week6_RC.action03.app",
        "description": "week6_RC.action03.app",
        "peekOfCode": "my_blueprint = Blueprint('my_blueprint', __name__)\n@my_blueprint.route('/hello')\ndef hello():\n    return \"Hello from my blueprint!\"\n@my_blueprint.route('/greet/<name>')\ndef greet(name):\n    return f\"Hello, {name}!\"\n# 두 번째 블루프린트\nanother_blueprint = Blueprint('another_blueprint', __name__, url_prefix='/another')\n# /another/world",
        "detail": "week6_RC.action03.app",
        "documentation": {}
    },
    {
        "label": "another_blueprint",
        "kind": 5,
        "importPath": "week6_RC.action03.app",
        "description": "week6_RC.action03.app",
        "peekOfCode": "another_blueprint = Blueprint('another_blueprint', __name__, url_prefix='/another')\n# /another/world\n@another_blueprint.route('/world')\ndef world():\n    return \"Hello, world, from another blueprint!\"\n# /another/echo\n@another_blueprint.route('/echo', methods=['POST'])\ndef echo():\n    data = request.json\n    return f\"Received: {data}\"",
        "detail": "week6_RC.action03.app",
        "documentation": {}
    },
    {
        "label": "third_blueprint",
        "kind": 5,
        "importPath": "week6_RC.action03.app",
        "description": "week6_RC.action03.app",
        "peekOfCode": "third_blueprint = Blueprint('third_blueprint', __name__, url_prefix='/third')\n@third_blueprint.route('/bye')\ndef goodbye():\n    return \"Goodbye from the third blueprint!\"\n# 애플리케이션에 블루프린트 등록\napp.register_blueprint(my_blueprint)\napp.register_blueprint(another_blueprint)\napp.register_blueprint(third_blueprint)\nif __name__ == \"__main__\":\n    app.run(debug=True)",
        "detail": "week6_RC.action03.app",
        "documentation": {}
    },
    {
        "label": "ItemSchema",
        "kind": 6,
        "importPath": "week6_RC.action03.schemas",
        "description": "week6_RC.action03.schemas",
        "peekOfCode": "class ItemSchema(Schema):\n\t\t# id 필드가 직렬화(즉, Python 객체에서 JSON으로 변환) 과정에서만 사용되고, (서버->클라)\n\t\t# 역직렬화(즉, JSON에서 Python 객체로 변환) 과정에서는 무시된다 (클라->서버)\n\t\t# 즉, id 값은 서버에서 관리하겠다는 뜻\n    id = fields.Int(dump_only=True)\n    name = fields.Str(required=True)\n    description = fields.Str()",
        "detail": "week6_RC.action03.schemas",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "week6_RC.action01",
        "description": "week6_RC.action01",
        "peekOfCode": "def index():\n    return jsonify(message = \"Hello, OZ BE14!\")\n#GET\n# 1 전체 게시글 불러오는 API\n@app.route('/api/v1/feeds', methods = ['GET'])\ndef show_all_feeds():\n    data = {'result':'success', 'data': {\"feed1\":\"data\", \"feed2\":\"data2\"}}\n# 2 특정 게시글을 불러오는 API\n@app.route('/api/v1/feeds/<int:feed_id>', methods = ['GET'])\ndef show_one_feed(feed_id):",
        "detail": "week6_RC.action01",
        "documentation": {}
    },
    {
        "label": "show_all_feeds",
        "kind": 2,
        "importPath": "week6_RC.action01",
        "description": "week6_RC.action01",
        "peekOfCode": "def show_all_feeds():\n    data = {'result':'success', 'data': {\"feed1\":\"data\", \"feed2\":\"data2\"}}\n# 2 특정 게시글을 불러오는 API\n@app.route('/api/v1/feeds/<int:feed_id>', methods = ['GET'])\ndef show_one_feed(feed_id):\n    print(feed_id)\n    return jsonify({'result': 'success', 'data': {\"feed1\": \"data\"}})\n#POST\n# 3 게시글 작성하는 API\n@app.route('/api/v1/feeds', methods = ['POST'])",
        "detail": "week6_RC.action01",
        "documentation": {}
    },
    {
        "label": "show_one_feed",
        "kind": 2,
        "importPath": "week6_RC.action01",
        "description": "week6_RC.action01",
        "peekOfCode": "def show_one_feed(feed_id):\n    print(feed_id)\n    return jsonify({'result': 'success', 'data': {\"feed1\": \"data\"}})\n#POST\n# 3 게시글 작성하는 API\n@app.route('/api/v1/feeds', methods = ['POST'])\ndef create_one_feed():\n    name = request.form['name']\n    age = request.form['age']\n    print(name, age)",
        "detail": "week6_RC.action01",
        "documentation": {}
    },
    {
        "label": "create_one_feed",
        "kind": 2,
        "importPath": "week6_RC.action01",
        "description": "week6_RC.action01",
        "peekOfCode": "def create_one_feed():\n    name = request.form['name']\n    age = request.form['age']\n    print(name, age)\n    return jsonify({'result': 'success'})\n@app.get(\"/datas\")\ndef get_datas():\n    return {'datas': datas}\n@app.post(\"/datas\")\ndef create_data():",
        "detail": "week6_RC.action01",
        "documentation": {}
    },
    {
        "label": "get_datas",
        "kind": 2,
        "importPath": "week6_RC.action01",
        "description": "week6_RC.action01",
        "peekOfCode": "def get_datas():\n    return {'datas': datas}\n@app.post(\"/datas\")\ndef create_data():\n    request_data = request.get_json()\n    new_data = {'items': request_data.get(\"items\", [])}\n    datas.append(new_data)\n    return new_data, 201\nif __name__ == \"__main__\":\n    app.run(debug=True)",
        "detail": "week6_RC.action01",
        "documentation": {}
    },
    {
        "label": "create_data",
        "kind": 2,
        "importPath": "week6_RC.action01",
        "description": "week6_RC.action01",
        "peekOfCode": "def create_data():\n    request_data = request.get_json()\n    new_data = {'items': request_data.get(\"items\", [])}\n    datas.append(new_data)\n    return new_data, 201\nif __name__ == \"__main__\":\n    app.run(debug=True)",
        "detail": "week6_RC.action01",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "week6_RC.action01",
        "description": "week6_RC.action01",
        "peekOfCode": "app = Flask(__name__)\ndatas = [{\"name\": \"item1\", \"price\": 10}]\n@app.route('/')\ndef index():\n    return jsonify(message = \"Hello, OZ BE14!\")\n#GET\n# 1 전체 게시글 불러오는 API\n@app.route('/api/v1/feeds', methods = ['GET'])\ndef show_all_feeds():\n    data = {'result':'success', 'data': {\"feed1\":\"data\", \"feed2\":\"data2\"}}",
        "detail": "week6_RC.action01",
        "documentation": {}
    },
    {
        "label": "datas",
        "kind": 5,
        "importPath": "week6_RC.action01",
        "description": "week6_RC.action01",
        "peekOfCode": "datas = [{\"name\": \"item1\", \"price\": 10}]\n@app.route('/')\ndef index():\n    return jsonify(message = \"Hello, OZ BE14!\")\n#GET\n# 1 전체 게시글 불러오는 API\n@app.route('/api/v1/feeds', methods = ['GET'])\ndef show_all_feeds():\n    data = {'result':'success', 'data': {\"feed1\":\"data\", \"feed2\":\"data2\"}}\n# 2 특정 게시글을 불러오는 API",
        "detail": "week6_RC.action01",
        "documentation": {}
    },
    {
        "label": "Item",
        "kind": 6,
        "importPath": "week6_RC.action02",
        "description": "week6_RC.action02",
        "peekOfCode": "class Item(Resource):\n    # 특정 아이템 조회\n    def get(self, name):\n        for item in items:\n            if item['name'] == name:\n                return item\n        return {'message': 'Item not found'}, 404\n    # 새 아이템 추가\n    def post(self, name):\n        for item in items:",
        "detail": "week6_RC.action02",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "week6_RC.action02",
        "description": "week6_RC.action02",
        "peekOfCode": "def index():\n    return jsonify(message = \"Hello, OZ BE14!\")\nclass Item(Resource):\n    # 특정 아이템 조회\n    def get(self, name):\n        for item in items:\n            if item['name'] == name:\n                return item\n        return {'message': 'Item not found'}, 404\n    # 새 아이템 추가",
        "detail": "week6_RC.action02",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "week6_RC.action02",
        "description": "week6_RC.action02",
        "peekOfCode": "app = Flask(__name__)\napi = Api(app)\nitems = [] # 간단한 데이터베이스 역할 수행하는 리스트\n@app.route('/')\ndef index():\n    return jsonify(message = \"Hello, OZ BE14!\")\nclass Item(Resource):\n    # 특정 아이템 조회\n    def get(self, name):\n        for item in items:",
        "detail": "week6_RC.action02",
        "documentation": {}
    },
    {
        "label": "api",
        "kind": 5,
        "importPath": "week6_RC.action02",
        "description": "week6_RC.action02",
        "peekOfCode": "api = Api(app)\nitems = [] # 간단한 데이터베이스 역할 수행하는 리스트\n@app.route('/')\ndef index():\n    return jsonify(message = \"Hello, OZ BE14!\")\nclass Item(Resource):\n    # 특정 아이템 조회\n    def get(self, name):\n        for item in items:\n            if item['name'] == name:",
        "detail": "week6_RC.action02",
        "documentation": {}
    },
    {
        "label": "items",
        "kind": 5,
        "importPath": "week6_RC.action02",
        "description": "week6_RC.action02",
        "peekOfCode": "items = [] # 간단한 데이터베이스 역할 수행하는 리스트\n@app.route('/')\ndef index():\n    return jsonify(message = \"Hello, OZ BE14!\")\nclass Item(Resource):\n    # 특정 아이템 조회\n    def get(self, name):\n        for item in items:\n            if item['name'] == name:\n                return item",
        "detail": "week6_RC.action02",
        "documentation": {}
    }
]